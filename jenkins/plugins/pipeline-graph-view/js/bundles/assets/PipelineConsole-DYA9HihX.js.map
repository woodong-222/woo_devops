{"version":3,"mappings":"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","names":["jsx","height","setMainViewVisibility","isMobile","handleViewChange","e","Fragment","jsxs","ViewIcon","mainViewVisibility","MainViewVisibility","stageViewPosition","StageViewPosition","Filter","disabled","visible","useState","visibleStatuses","toggleStatus","resetStatuses","allVisible","Result","setVisible","Tooltip","Tippy","DefaultDropdownProps","hide","classNames","item","index","selected","onNodeSelect","filteredStages","filterStageTree","search","handleSelect","nodeId","event","stages","setSearch","stage","hasSelectedDescendant","_a","child","TreeNode","memo","useFilter","hasChildren","isSelected","isExpanded","setIsExpanded","handleToggleClick","useEffect","filteredChildren","LOG_FETCH_SIZE","POLL_INTERVAL","useStepsPoller","props","run","useRunPoller","openStage","expandedSteps","setExpandedSteps","collapsedSteps","useRef","steps","setSteps","stepBuffers","setStepBuffers","updateStepConsoleOffset","stepId","forceUpdate","startByte","stepBuffer","promise","otherStartByte","response","newLogLines","stepBuffersRef","parseUrlParams","useCallback","params","step","s","prev","setOpenStage","stepResult","selectedStepResult","selectedStep","nextStepsSerialized","previousStepsSerialized","defaultStep","data","getRunSteps","updateStepsIfChanged","polling","resolve","handleStageSelect","lastStep","stepsForStage","onStepToggle","id","onMoreConsoleClick","getStageSteps","getStageStepBuffers","stageId","buffers","result","findStage","ConsoleLogStream","lazy","__vitePreload","fetchData","consoleBuildOutput","getConsoleBuildOutput","NoStageStepsFallback","err","logBuffer","ScrollToTopBottom","isAtTop","isAtBottom","setIsAtBottom","isScrollable","setIsScrollable","scrollTop","atBottom","windowHeight","scrollable","updateScrollState","observer","scrollToTop","scrollToBottom","stageViewWidth","stageViewHeight","direction","setIsDragging","isVertical","initialSize","storageKey","treeViewWidth","dividerRef","EMOJI_VARIATION","OBJECT_REPLACEMENT","tlds","init$2","customSchemes","State","utlds","decodeTlds","encodedUtlds","tt","Start","APOSTROPHE","OPENBRACKET","CLOSEBRACKET","CLOSEPAREN","FULLWIDTHRIGHTPAREN","LEFTCORNERBRACKET","RIGHTCORNERBRACKET","LEFTWHITECORNERBRACKET","RIGHTWHITECORNERBRACKET","FULLWIDTHLESSTHAN","FULLWIDTHGREATERTHAN","AMPERSAND","CARET","COMMA","DOLLAR","DOT","EQUALS","EXCLAMATION","PIPE","POUND","QUOTE","SLASH","SEMI","UNDERSCORE","Num","tr","NUM","numeric","ASCII_LETTER","ALPHANUMERICAL","DIGIT","Asciinumeric","UWord","LETTER","UWORD","alpha","Alphanumeric","LF","Cr","CR","WS","Ws","Emoji","EMOJI","EMOJI$1","uwordjr","i","TLD","WORD","groups","addToGroups","fastts","SCHEME","wordjr","SLASH_SCHEME","b","a","slashscheme","sch","flags","asciinumeric","ts","LOCALHOST","tk","run$1","start","iterable","charCount","tokens","cursor","charCursor","nextState","tokenLength","charsSinceAccepts","sinceAccepts","latestAccepting","state","str","len","first","second","char","defaultt","jr","next","input","encoded","stack","digits","popDigitCount","words","popCount","defaults","noop","o","opts","Options","uppercaseIgnoredTags","defaultRender","ir","token","key","operator","option","isCallable","obj","MultiToken","value","scheme","options","val","truncate","formatted","protocol","formattedHref","href","tagName","content","attributes","className","target","attrs","rel","createTokenClass","Token","type","p","Email","Text","Url","COLON","makeState","arg","qsAccepting","ASTERISK","BACKSLASH","BACKTICK","HYPHEN","PERCENT","PLUS","SYM","TILDE","qsNonAccepting","QUERY","OPENANGLEBRACKET","OPENBRACE","CLOSEBRACE","OPENPAREN","FULLWIDTHLEFTPAREN","localpartAccepting","Localpart","Scheme","SlashScheme","ta","Domain","AT","LocalpartAt","LocalpartDot","EmailDomain","EmailDomainDot","Email$1","EmailDomainHyphen","DomainHyphen","DomainDot","DomainDotTld","DomainDotTldColon","DomainDotTldColonPort","Url$1","UrlNonaccept","SlashSchemeColon","SlashSchemeColonSlash","SchemeColon","UriPrefix","bracketPairs","CLOSEANGLEBRACKET","OPEN","UrlOpenQ","UrlOpenSyms","CLOSE","NL","multis","textTokens","secondState","multiLength","initMultiToken","subtokens","Multi","startIdx","INIT","init","init$1","tokenize","stringToElements","meta","elements","stepItemData","ConsoleLogCard","StageView","StageDetails","StageSteps","PipelineConsole","rootElement","useLayoutPreferences","openStageSteps","openStageStepBuffers","loading","currentRunPath","previousRunPath","showSplitView","isOnlyPlaceholderNode","canConfigure","useUserPermissions","DropdownPortal","Dropdown","StagesCustomization","DOCUMENT","CONSOLE","SETTINGS","SplitView","Skeleton","DataTreeView","_"],"ignoreList":[9,10],"sources":["../../../../frontend/pipeline-console-view/pipeline-console/main/components/skeleton.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/components/stages-customization.tsx","../../../../frontend/common/components/filter.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/DataTreeView.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/PipelineConsoleModel.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/hooks/use-steps-poller.ts","../../../../frontend/pipeline-console-view/pipeline-console/main/NoStageStepsFallback.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/scroll-to-top-bottom.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/split-view.tsx","../../../../../../node_modules/linkifyjs/dist/linkify.mjs","../../../../../../node_modules/linkify-react/dist/linkify-react.mjs","../../../../frontend/pipeline-console-view/pipeline-console/main/ConsoleLogCard.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/stage-steps.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/StageView.tsx","../../../../frontend/pipeline-console-view/pipeline-console/main/PipelineConsole.tsx"],"sourcesContent":["import \"./skeleton.scss\";\n\nexport default function Skeleton({ height }: { height?: number }) {\n  return (\n    <div\n      className={\"pgv-skeleton\"}\n      style={\n        height\n          ? {\n              height: `${height}rem`,\n            }\n          : {}\n      }\n    />\n  );\n}\n","import \"./stages-customization.scss\";\n\nimport { ChangeEvent } from \"react\";\n\nimport {\n  MainViewVisibility,\n  StageViewPosition,\n  useLayoutPreferences,\n} from \"../providers/user-preference-provider.tsx\";\n\nexport default function StagesCustomization() {\n  const {\n    mainViewVisibility,\n    setMainViewVisibility,\n    stageViewPosition,\n    setStageViewPosition,\n    isMobile,\n  } = useLayoutPreferences();\n\n  if (isMobile) {\n    return null;\n  }\n\n  const handleViewChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setMainViewVisibility(e.target.value as MainViewVisibility);\n  };\n\n  const handlePositionChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setStageViewPosition(e.target.value as StageViewPosition);\n  };\n\n  return (\n    <>\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"main-view-visibility\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <ViewIcon\n            mainViewVisibility={mainViewVisibility}\n            stageViewPosition={stageViewPosition}\n          />\n        </div>\n        Views\n        <span>\n          {mainViewVisibility === MainViewVisibility.BOTH && \"Graph and stages\"}\n          {mainViewVisibility === MainViewVisibility.GRAPH_ONLY && \"Graph\"}\n          {mainViewVisibility === MainViewVisibility.STAGES_ONLY && \"Stages\"}\n        </span>\n        <select\n          id=\"main-view-visibility\"\n          value={mainViewVisibility}\n          onChange={handleViewChange}\n        >\n          <option value={MainViewVisibility.BOTH}>Graph and stages</option>\n          <option value={MainViewVisibility.GRAPH_ONLY}>Graph</option>\n          <option value={MainViewVisibility.STAGES_ONLY}>Stages</option>\n        </select>\n      </label>\n\n      <label\n        className=\"jenkins-dropdown__item pgv-stages-customization\"\n        htmlFor=\"stage-view-position\"\n      >\n        <div className=\"jenkins-dropdown__item__icon\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <circle\n              cx=\"128\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <circle\n              cx=\"256\"\n              cy=\"416\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n              d=\"M256 256v112\"\n            />\n            <circle\n              cx=\"384\"\n              cy=\"96\"\n              r=\"48\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n            <path\n              d=\"M128 144c0 74.67 68.92 112 128 112M384 144c0 74.67-68.92 112-128 112\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth=\"32\"\n            />\n          </svg>\n        </div>\n        Graph position\n        <span>\n          {stageViewPosition === StageViewPosition.TOP ? \"Top\" : \"Left\"}\n        </span>\n        <select\n          id=\"stage-view-position\"\n          value={stageViewPosition}\n          onChange={handlePositionChange}\n          disabled={mainViewVisibility === MainViewVisibility.STAGES_ONLY}\n        >\n          <option value={StageViewPosition.TOP}>Top</option>\n          <option value={StageViewPosition.LEFT}>Left</option>\n        </select>\n      </label>\n      <div className=\"jenkins-dropdown__separator\" />\n    </>\n  );\n}\n\nfunction ViewIcon({\n  mainViewVisibility,\n  stageViewPosition,\n}: {\n  mainViewVisibility: MainViewVisibility;\n  stageViewPosition: StageViewPosition;\n}) {\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n          <line x1=\"184\" y1=\"180\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"both\" && stageViewPosition === \"left\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"150\" y1=\"100\" x2=\"150\" y2=\"420\" />\n          <line x1=\"280\" y1=\"100\" x2=\"280\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"top\") {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"31\" y1=\"180\" x2=\"470\" y2=\"180\" />\n        </g>\n      </svg>\n    );\n  }\n\n  if (\n    mainViewVisibility === \"stagesOnly\" ||\n    (mainViewVisibility === \"graphOnly\" && stageViewPosition === \"left\")\n  ) {\n    return (\n      <svg\n        width=\"512px\"\n        height=\"512px\"\n        viewBox=\"0 0 512 512\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <g\n          fill=\"none\"\n          fillRule=\"evenodd\"\n          stroke=\"currentColor\"\n          strokeWidth=\"32\"\n        >\n          <rect x=\"31\" y=\"86\" width=\"450\" height=\"340\" rx=\"70\" />\n          <line x1=\"184\" y1=\"100\" x2=\"184\" y2=\"420\" />\n        </g>\n      </svg>\n    );\n  }\n}\n","import \"./filter.scss\";\n\nimport Tippy from \"@tippyjs/react\";\nimport { useState } from \"react\";\n\nimport { useFilter } from \"../../pipeline-console-view/pipeline-console/main/providers/filter-provider.tsx\";\nimport { Result } from \"../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { classNames } from \"../utils/classnames.ts\";\nimport { DefaultDropdownProps } from \"./dropdown.tsx\";\nimport StatusIcon from \"./status-icon.tsx\";\nimport Tooltip from \"./tooltip.tsx\";\n\nexport default function Filter({ disabled }: FilterProps) {\n  const [visible, setVisible] = useState(false);\n  const { visibleStatuses, toggleStatus, resetStatuses, allVisible } =\n    useFilter();\n\n  const statuses = [\n    {\n      key: \"running\",\n      text: \"Running\",\n      status: Result.running,\n    },\n    {\n      key: \"success\",\n      text: \"Successful\",\n      status: Result.success,\n    },\n    {\n      key: \"failure\",\n      text: \"Failed\",\n      status: Result.failure,\n    },\n    {\n      key: \"unstable\",\n      text: \"Unstable\",\n      status: Result.unstable,\n    },\n    {\n      key: \"aborted\",\n      text: \"Aborted\",\n      status: Result.aborted,\n    },\n    {\n      key: \"skipped\",\n      text: \"Skipped\",\n      status: Result.skipped,\n    },\n    {\n      key: \"not_built\",\n      text: \"Not built\",\n      status: Result.not_built,\n    },\n  ];\n\n  const show = () => setVisible(true);\n  const hide = () => setVisible(false);\n\n  return (\n    <Tooltip content={\"Filter\"}>\n      <Tippy\n        {...DefaultDropdownProps}\n        visible={visible}\n        onClickOutside={hide}\n        placement=\"bottom\"\n        appendTo={document.body}\n        offset={[0, -1]}\n        content={\n          <div className=\"jenkins-dropdown\" data-testid=\"filter-dropdown\">\n            <div className=\"jenkins-dropdown__heading\">\n              Filter\n              {!allVisible && (\n                <button\n                  className={\n                    \"jenkins-button jenkins-button--tertiary jenkins-!-accent-color pgv-reset-button\"\n                  }\n                  onClick={resetStatuses}\n                >\n                  Reset\n                </button>\n              )}\n            </div>\n            {statuses.map((item, index) => (\n              <button\n                key={index}\n                className={classNames(\n                  \"jenkins-dropdown__item\",\n                  \"pgv-filter-button\",\n                  {\n                    \"pgv-filter-button--unchecked\": !visibleStatuses.includes(\n                      item.status,\n                    ),\n                  },\n                )}\n                onClick={() => toggleStatus(item.status)}\n              >\n                <div className=\"jenkins-dropdown__item__icon\">\n                  <StatusIcon\n                    status={item.status}\n                    skeleton={!visibleStatuses.includes(item.status)}\n                    percentage={0}\n                  />\n                </div>\n                {item.text}\n              </button>\n            ))}\n          </div>\n        }\n      >\n        <button\n          className={classNames(\n            \"jenkins-button\",\n            {\n              \"jenkins-button--tertiary\": allVisible,\n            },\n            {\n              \"jenkins-!-accent-color\": !allVisible,\n            },\n          )}\n          type=\"button\"\n          disabled={disabled}\n          onClick={visible ? hide : show}\n          aria-label={\"Filter\"}\n        >\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={!allVisible ? 42 : 36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n        </button>\n      </Tippy>\n    </Tooltip>\n  );\n}\n\ninterface FilterProps {\n  disabled?: boolean;\n}\n","import \"./data-tree-view.scss\";\n\nimport {\n  memo,\n  MouseEvent as ReactMouseEvent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\n\nimport Filter from \"../../../common/components/filter.tsx\";\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport LiveTotal from \"../../../common/utils/live-total.tsx\";\nimport {\n  Result,\n  StageInfo,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nimport { useFilter } from \"./providers/filter-provider.tsx\";\n\nexport default function DataTreeView({\n  stages,\n  selected,\n  onNodeSelect,\n}: DataTreeViewProps) {\n  const { search, setSearch, visibleStatuses } = useFilter();\n  const filteredStages = filterStageTree(search, visibleStatuses, stages);\n\n  const handleSelect = useCallback(\n    (event: ReactMouseEvent, nodeId: string) => {\n      onNodeSelect(event, nodeId);\n    },\n    [onNodeSelect],\n  );\n\n  if (stages.length === 1 && stages[0].placeholder) {\n    return null;\n  }\n\n  return (\n    <div>\n      <div className={\"pgw-filter-bar\"}>\n        <div className=\"jenkins-search\">\n          <div className=\"jenkins-search__icon\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M221.09 64a157.09 157.09 0 10157.09 157.09A157.1 157.1 0 00221.09 64z\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n              />\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeMiterlimit=\"10\"\n                strokeWidth=\"32\"\n                d=\"M338.29 338.29L448 448\"\n              />\n            </svg>\n          </div>\n          <input\n            className=\"jenkins-input jenkins-search__input\"\n            placeholder=\"Search\"\n            type=\"search\"\n            autoComplete=\"off\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"off\"\n            spellCheck=\"false\"\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n        </div>\n        <Filter />\n      </div>\n\n      {filteredStages.length === 0 && (\n        <div className={\"jenkins-notice\"}>\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n            <path\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={36}\n              d=\"M32 144h448M112 256h288M208 368h96\"\n            />\n          </svg>\n          <div>No stages</div>\n        </div>\n      )}\n\n      <ol className={\"pgv-tree\"} role=\"tree\" aria-label={\"Pipeline Stages\"}>\n        {filteredStages.map((stage) => (\n          <TreeNode\n            key={stage.id}\n            stage={stage}\n            selected={String(selected)}\n            onSelect={handleSelect}\n          />\n        ))}\n      </ol>\n    </div>\n  );\n}\n\nfunction hasSelectedDescendant(stage: StageInfo, selected: string): boolean {\n  return stage.children?.some(\n    (child) =>\n      String(child.id) === selected || hasSelectedDescendant(child, selected),\n  );\n}\n\nconst TreeNode = memo(function TreeNode({\n  stage,\n  selected,\n  onSelect,\n}: TreeNodeProps) {\n  const { search, visibleStatuses, allVisible } = useFilter();\n  const hasChildren = stage.children && stage.children.length > 0;\n  const isSelected = String(stage.id) === selected;\n  const [isExpanded, setIsExpanded] = useState<boolean>(\n    hasSelectedDescendant(stage, selected),\n  );\n\n  const handleToggleClick = (e: ReactMouseEvent) => {\n    e.stopPropagation();\n    setIsExpanded(!isExpanded);\n  };\n\n  useEffect(() => {\n    if (hasSelectedDescendant(stage, selected)) {\n      setIsExpanded(true);\n    }\n  }, [stage, selected]);\n\n  useEffect(() => {\n    if (search.length || !allVisible) {\n      if (filterStageTree(search, visibleStatuses, [stage]).length !== 0) {\n        setIsExpanded(true);\n      }\n    }\n  }, [search, visibleStatuses, allVisible, stage]);\n\n  return (\n    <li\n      className=\"pgv-tree-stage\"\n      role={\"treeitem\"}\n      {...(hasChildren ? { \"aria-expanded\": isExpanded } : {})}\n      aria-selected={isSelected}\n      aria-labelledby={`stage-${stage.id}-name`}\n    >\n      <div className=\"pgv-tree-item-container\">\n        <a\n          href={`?selected-node=` + stage.id}\n          onClick={(e) => {\n            // Only prevent left clicks\n            if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n              return;\n            }\n\n            e.preventDefault();\n\n            history.replaceState({}, \"\", `?selected-node=` + stage.id);\n            if (!isSelected) {\n              onSelect(e, String(stage.id));\n            }\n            setIsExpanded(!isExpanded);\n          }}\n          className={classNames(\"pgv-tree-item\", {\n            \"pgv-tree-item--active\": isSelected,\n            \"pgv-tree-item--skeleton\": stage.skeleton,\n          })}\n          aria-labelledby={`stage-${stage.id}-name`}\n        >\n          <div className={\"pgv-tree-item__content\"}>\n            <div className=\"pgv-status-icon\">\n              <StatusIcon\n                status={stage.state}\n                percentage={stage.completePercent}\n                skeleton={stage.skeleton}\n              />\n            </div>\n            <div className={\"pgv-tree-item__info\"}>\n              <div\n                className=\"pgv-tree-item__name\"\n                id={`stage-${stage.id}-name`}\n              >\n                <span className={\"jenkins-visually-hidden\"}>Stage </span>\n                {stage.name}\n              </div>\n              <div className=\"pgv-tree-item__description\">\n                <LiveTotal\n                  start={stage.startTimeMillis}\n                  total={stage.totalDurationMillis}\n                />\n              </div>\n            </div>\n          </div>\n        </a>\n        {hasChildren && (\n          <button\n            className={classNames(\"pgv-tree-item__toggle\", {\n              \"pgv-tree-item__toggle--active\": isExpanded,\n            })}\n            onClick={handleToggleClick}\n            aria-label={`${isExpanded ? \"Collapse\" : \"Expand\"} ${stage.name}`}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </button>\n        )}\n      </div>\n\n      {hasChildren && isExpanded && (\n        <div className=\"pgv-tree-children\">\n          <ol\n            role={\"group\"}\n            aria-label={`Stages in ${stage.name}`}\n            className={\"pgv-tree\"}\n          >\n            {stage.children.map((child) => (\n              <TreeNode\n                key={child.id}\n                stage={child}\n                selected={selected}\n                onSelect={onSelect}\n              />\n            ))}\n          </ol>\n        </div>\n      )}\n    </li>\n  );\n});\n\nconst filterStageTree = (\n  search: string,\n  visibleStatuses: Result[],\n  stages: StageInfo[],\n): StageInfo[] => {\n  return stages\n    .map((stage) => {\n      const filteredChildren = stage.children\n        ? filterStageTree(search, visibleStatuses, stage.children)\n        : [];\n\n      const matchesSelf =\n        stage.name.toLowerCase().includes(search.toLowerCase()) &&\n        visibleStatuses.includes(stage.state);\n\n      // Include this stage if it matches or has matching children\n      if (matchesSelf || filteredChildren.length > 0) {\n        return {\n          ...stage,\n          children: filteredChildren,\n        };\n      }\n\n      return null;\n    })\n    .filter((stage) => stage !== null);\n};\n\ninterface DataTreeViewProps {\n  stages: StageInfo[];\n  selected?: number;\n  onNodeSelect: (event: ReactMouseEvent, nodeId: string) => void;\n}\n\ninterface TreeNodeProps {\n  stage: StageInfo;\n  selected: string;\n  onSelect: (event: ReactMouseEvent, id: string) => void;\n}\n","// re-export Result so the relative path exists in one location.\nexport * from \"../../../common/RestClient.tsx\";\nexport type {\n  StageInfo,\n  StageType,\n} from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\nexport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nexport const LOG_FETCH_SIZE = 150 * 1024;\nexport const POLL_INTERVAL = 1000;\n","import { useCallback, useEffect, useRef, useState } from \"react\";\n\nimport useRunPoller from \"../../../../common/tree-api.ts\";\nimport {\n  getConsoleTextOffset,\n  getRunSteps,\n  LOG_FETCH_SIZE,\n  POLL_INTERVAL,\n  Result,\n  StageInfo,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"../PipelineConsoleModel.tsx\";\n\nexport function useStepsPoller(props: RunPollerProps) {\n  const { run, loading } = useRunPoller({\n    currentRunPath: props.currentRunPath,\n    previousRunPath: props.previousRunPath,\n  });\n\n  const [openStage, setOpenStage] = useState(\"\");\n  const [expandedSteps, setExpandedSteps] = useState<string[]>([]);\n  const collapsedSteps = useRef(new Set<string>());\n  const [steps, setSteps] = useState<StepInfo[]>([]);\n  const [stepBuffers, setStepBuffers] = useState(\n    new Map<string, StepLogBufferInfo>(),\n  );\n  // Avoid invalidating updateStepConsoleOffset on every stepBuffer change.\n  const stepBuffersRef = useRef(stepBuffers);\n  const updateStepConsoleOffset = useCallback(\n    async (stepId: string, forceUpdate: boolean, startByte: number) => {\n      const stepBuffers = stepBuffersRef.current;\n      let stepBuffer = stepBuffers.get(stepId);\n      if (!stepBuffer) {\n        stepBuffer = {\n          lines: [],\n          startByte: 0 - LOG_FETCH_SIZE,\n          endByte: -1,\n        };\n        stepBuffers.set(stepId, stepBuffer);\n      }\n      while (stepBuffer.pending) {\n        const { promise, startByte: otherStartByte } = stepBuffer.pending;\n        const response = await promise;\n        if (startByte === otherStartByte && response) {\n          return; // deduplicated fetch operation\n        }\n      }\n      if (stepBuffer.fullyFetched) return; // Already fetched in full.\n      if (stepBuffer.startByte > 0 && !forceUpdate) return;\n      const promise = getConsoleTextOffset(stepId, startByte);\n      stepBuffer.pending = { promise, startByte };\n      let response;\n      try {\n        response = await promise;\n      } finally {\n        delete stepBuffer.pending;\n      }\n      if (!response) return;\n\n      const newLogLines = response.text.trim().split(\"\\n\") || [];\n\n      if (stepBuffer.endByte > 0 && stepBuffer.endByte <= startByte) {\n        stepBuffer.lines = [...stepBuffer.lines, ...newLogLines];\n      } else {\n        stepBuffer.lines = newLogLines;\n        stepBuffer.startByte = response.startByte;\n      }\n\n      stepBuffer.endByte = response.endByte;\n      if (response.startByte === 0 && !response.nodeIsActive) {\n        stepBuffer.fullyFetched = true;\n      }\n\n      stepBuffersRef.current = new Map(stepBuffers).set(stepId, stepBuffer);\n      setStepBuffers(stepBuffersRef.current);\n    },\n    [],\n  );\n\n  const parseUrlParams = useCallback(\n    (steps: StepInfo[]): boolean => {\n      const params = new URLSearchParams(document.location.search.substring(1));\n      let selected = params.get(\"selected-node\");\n      if (!selected) {\n        return false;\n      }\n      if (collapsedSteps.current.has(selected)) return true;\n\n      const step = steps.find((s) => s.id === selected);\n      if (step) {\n        selected = step.stageId;\n        setExpandedSteps((prev) => {\n          if (prev.includes(step.id)) return prev;\n          return [...prev, step.id];\n        });\n\n        updateStepConsoleOffset(\n          step.id,\n          false,\n          parseInt(params.get(\"start-byte\") || `${0 - LOG_FETCH_SIZE}`),\n        );\n      }\n\n      setOpenStage(selected);\n      return true;\n    },\n    [updateStepConsoleOffset],\n  );\n\n  const getDefaultSelectedStep = useCallback(\n    (steps: StepInfo[]) => {\n      let selectedStep = steps.find((step) => step !== undefined);\n      if (!steps || steps.length === 0 || !selectedStep) {\n        return null;\n      }\n      for (const step of steps) {\n        const stepResult = step.state.toLowerCase() as Result;\n        const selectedStepResult = selectedStep?.state.toLowerCase() as Result;\n        switch (stepResult) {\n          case Result.running:\n          case Result.queued:\n          case Result.paused:\n            // Return first running/queued/paused step.\n            return step;\n          case Result.unstable:\n          case Result.failure:\n          case Result.aborted:\n            if (\n              run?.complete &&\n              selectedStepResult &&\n              stepResult < selectedStepResult\n            ) {\n              // If the run is complete return first unstable/failed/aborted step which has a state worse\n              // than the selectedStep.\n              // E.g. if the first step state is failure we want to return that over a later unstable step.\n              return step;\n            }\n            continue;\n          default:\n            // Otherwise select the step with the worst result with the largest id - e.g. (last step if all successful).\n            if (selectedStepResult && stepResult <= selectedStepResult) {\n              selectedStep = step;\n            }\n        }\n      }\n      return selectedStep;\n    },\n    [run?.complete],\n  );\n\n  useEffect(() => {\n    let previousStepsSerialized = \"\";\n    function updateStepsIfChanged(steps: StepInfo[]) {\n      const nextStepsSerialized = JSON.stringify(steps);\n      if (previousStepsSerialized === nextStepsSerialized) return; // no change\n      previousStepsSerialized = nextStepsSerialized;\n\n      setSteps(steps);\n\n      const usedUrl = parseUrlParams(steps);\n      if (!usedUrl) {\n        const defaultStep = getDefaultSelectedStep(steps);\n        if (defaultStep) {\n          setOpenStage(defaultStep.stageId);\n\n          if (defaultStep.stageId) {\n            setExpandedSteps((prev) => [...prev, defaultStep.id]);\n            updateStepConsoleOffset(defaultStep.id, false, 0 - LOG_FETCH_SIZE);\n          }\n        }\n      }\n    }\n\n    let polling = true;\n    const poll = async () => {\n      while (polling) {\n        const data = await getRunSteps();\n        if (data?.steps) updateStepsIfChanged(data.steps);\n        if (data?.runIsComplete) polling = false;\n        if (!polling) break;\n        await new Promise((resolve) => setTimeout(resolve, POLL_INTERVAL));\n      }\n    };\n    poll();\n    return () => {\n      polling = false;\n    };\n  }, [getDefaultSelectedStep, parseUrlParams, updateStepConsoleOffset]);\n\n  const handleStageSelect = useCallback(\n    (nodeId: string) => {\n      if (!nodeId) return;\n      if (nodeId === openStage) return; // skip if already selected\n\n      const stepsForStage = steps.filter((step) => step.stageId === nodeId);\n      const lastStep = stepsForStage[stepsForStage.length - 1];\n\n      history.replaceState({}, \"\", `?selected-node=` + nodeId);\n\n      setOpenStage(nodeId);\n      if (lastStep && !collapsedSteps.current.has(lastStep.id)) {\n        setExpandedSteps((prev) => [...prev, lastStep.id]);\n        updateStepConsoleOffset(lastStep.id, false, 0 - LOG_FETCH_SIZE);\n      }\n    },\n    [openStage, steps, updateStepConsoleOffset],\n  );\n\n  const onStepToggle = (nodeId: string) => {\n    if (!expandedSteps.includes(nodeId)) {\n      collapsedSteps.current.delete(nodeId);\n      setExpandedSteps((prev) => [...prev, nodeId]);\n      updateStepConsoleOffset(nodeId, false, 0 - LOG_FETCH_SIZE);\n    } else {\n      collapsedSteps.current.add(nodeId);\n      setExpandedSteps((prev) => prev.filter((id) => id !== nodeId));\n    }\n  };\n\n  const onMoreConsoleClick = useCallback(\n    (nodeId: string, startByte: number) => {\n      updateStepConsoleOffset(nodeId, true, startByte);\n    },\n    [updateStepConsoleOffset],\n  );\n\n  const getStageSteps = (stageId: string) => {\n    return steps.filter((step) => step.stageId === stageId);\n  };\n\n  const getStageStepBuffers = (stageId: string) => {\n    const buffers = new Map<string, StepLogBufferInfo>();\n    steps.forEach((step) => {\n      if (step.stageId === stageId && stepBuffers.has(step.id)) {\n        buffers.set(step.id, stepBuffers.get(step.id)!);\n      }\n    });\n    return buffers;\n  };\n\n  const getOpenStage = (): StageInfo | null => {\n    const findStage = (stages: StageInfo[]): StageInfo | null => {\n      for (const stage of stages) {\n        if (String(stage.id) === openStage) return stage;\n        if (stage.children.length > 0) {\n          const result = findStage(stage.children);\n          if (result) return result;\n        }\n      }\n      return null;\n    };\n    return openStage ? findStage(run?.stages || []) : null;\n  };\n\n  return {\n    openStage: getOpenStage(),\n    openStageSteps: getStageSteps(openStage),\n    openStageStepBuffers: getStageStepBuffers(openStage),\n    expandedSteps,\n    stages: run?.stages || [],\n    handleStageSelect,\n    onStepToggle,\n    onMoreConsoleClick,\n    loading,\n  };\n}\n\ninterface RunPollerProps {\n  currentRunPath: string;\n  previousRunPath?: string;\n}\n","import { lazy, useEffect, useState } from \"react\";\n\nimport {\n  getConsoleBuildOutput,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"../../../common/RestClient.tsx\";\nimport { Result } from \"../../../pipeline-graph-view/pipeline-graph/main/PipelineGraphModel.tsx\";\n\nconst ConsoleLogStream = lazy(() => import(\"./ConsoleLogStream.tsx\"));\n\nasync function fetchData(): Promise<StepLogBufferInfo> {\n  const consoleBuildOutput = await getConsoleBuildOutput();\n\n  return {\n    lines: consoleBuildOutput?.split(\"\\n\") ?? [],\n    startByte: 0,\n    endByte: 0,\n  };\n}\n\nexport function NoStageStepsFallback() {\n  const step: StepInfo = {\n    id: \"step-1\",\n    name: \"Step 1\",\n    title: \"Step 1 Title\",\n    state: Result.success,\n    completePercent: 100,\n    type: \"STEP\",\n    startTimeMillis: 0,\n    totalDurationMillis: 0,\n    stageId: \"\",\n    pauseDurationMillis: 0,\n  };\n\n  const [logBuffer, setLogBuffer] = useState<StepLogBufferInfo>();\n\n  useEffect(() => {\n    fetchData()\n      .then((data) => {\n        setLogBuffer(data);\n        return data;\n      })\n      .catch((err) => console.log(err));\n  }, []);\n\n  return (\n    <div className={\"pgv-stage-steps\"}>\n      <div className={\"pgv-step-detail-group\"}>\n        <ConsoleLogStream\n          logBuffer={logBuffer ?? { lines: [], startByte: 0, endByte: 0 }}\n          onMoreConsoleClick={() => {}}\n          step={step}\n          maxHeightScale={0.65}\n        />\n      </div>\n    </div>\n  );\n}\n","import \"./scroll-to-top-bottom.scss\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\n\nexport default function ScrollToTopBottom() {\n  const [isAtTop, setIsAtTop] = useState(true);\n  const [isAtBottom, setIsAtBottom] = useState(false);\n  const [isScrollable, setIsScrollable] = useState(false);\n\n  useEffect(() => {\n    const updateScrollState = () => {\n      const scrollTop =\n        window.pageYOffset || document.documentElement.scrollTop;\n      const windowHeight = window.innerHeight;\n      const docHeight = document.documentElement.scrollHeight;\n\n      const atTop = scrollTop <= 10;\n      const atBottom = scrollTop + windowHeight >= docHeight - 10;\n      const scrollable = docHeight > windowHeight + 10;\n\n      setIsAtTop(atTop);\n      setIsAtBottom(atBottom);\n      setIsScrollable(scrollable);\n    };\n\n    updateScrollState();\n\n    window.addEventListener(\"scroll\", updateScrollState);\n    window.addEventListener(\"resize\", updateScrollState);\n\n    const observer = new MutationObserver(updateScrollState);\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      characterData: true,\n    });\n\n    return () => {\n      window.removeEventListener(\"scroll\", updateScrollState);\n      window.removeEventListener(\"resize\", updateScrollState);\n      observer.disconnect();\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n    });\n  };\n\n  const scrollToBottom = () => {\n    window.scrollTo({\n      top: document.documentElement.scrollHeight,\n    });\n  };\n\n  return (\n    <div\n      className={classNames(`pgv-scroll-to-top-bottom`, {\n        \"pgv-scroll-to-top-bottom--visible\": isScrollable,\n      })}\n      aria-hidden={!isScrollable}\n    >\n      <button\n        onClick={scrollToTop}\n        className=\"jenkins-button\"\n        disabled={isAtTop}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 244l144-144 144 144M256 120v292\"\n          />\n        </svg>\n      </button>\n      <button\n        onClick={scrollToBottom}\n        className=\"jenkins-button\"\n        disabled={isAtBottom}\n      >\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n          <path\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth=\"48\"\n            d=\"M112 268l144 144 144-144M256 392V100\"\n          />\n        </svg>\n      </button>\n    </div>\n  );\n}\n","import \"./split-view.scss\";\n\nimport {\n  Children,\n  MouseEvent as ReactMouseEvent,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { useLayoutPreferences } from \"./providers/user-preference-provider.tsx\";\n\nexport default function SplitView(props: SplitViewNewProps) {\n  const {\n    setTreeViewWidth,\n    setStageViewWidth,\n    setStageViewHeight,\n    treeViewWidth,\n    stageViewWidth,\n    stageViewHeight,\n  } = useLayoutPreferences();\n\n  const { direction = \"horizontal\", storageKey } = props;\n  const [isDragging, setIsDragging] = useState(false);\n\n  const isVertical = direction === \"vertical\";\n\n  const initialSize = (() => {\n    if (storageKey === \"stages\") return treeViewWidth;\n    if (storageKey === \"graph\") {\n      return isVertical ? stageViewHeight : stageViewWidth;\n    }\n    return 300; // fallback\n  })();\n\n  useEffect(() => {\n    const newSize = (() => {\n      if (storageKey === \"stages\") return treeViewWidth;\n      if (storageKey === \"graph\") {\n        return direction === \"vertical\" ? stageViewHeight : stageViewWidth;\n      }\n      return 300;\n    })();\n\n    setPanelSize(newSize);\n  }, [direction, treeViewWidth, stageViewWidth, stageViewHeight, storageKey]);\n\n  const [panelSize, setPanelSize] = useState<number>(initialSize);\n\n  const dividerRef = useRef<HTMLDivElement>(null);\n\n  const startDragging = (e: ReactMouseEvent) => {\n    setIsDragging(true);\n    e.preventDefault();\n  };\n\n  const stopDragging = () => setIsDragging(false);\n\n  const handleDragging = (e: MouseEvent) => {\n    if (!isDragging) return;\n\n    // Dynamically follow mouse based on direction\n    const newSize =\n      direction === \"vertical\"\n        ? e.clientY - getContainerOffset()\n        : e.clientX - getContainerOffset();\n\n    const clampedSize = Math.max(\n      direction === \"vertical\" ? 100 : 200,\n      Math.min(newSize, 1500),\n    );\n    setPanelSize(clampedSize);\n\n    // Update context sizes\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(clampedSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(clampedSize);\n      } else {\n        setStageViewWidth(clampedSize);\n      }\n    }\n  };\n\n  const handleDoubleClick = () => {\n    const resetSize = (() => {\n      if (storageKey === \"stages\") return 300;\n      if (storageKey === \"graph\") return isVertical ? 250 : 600;\n      return 300;\n    })();\n\n    setPanelSize(resetSize);\n\n    if (storageKey === \"stages\") {\n      setTreeViewWidth(resetSize);\n    } else if (storageKey === \"graph\") {\n      if (direction === \"vertical\") {\n        setStageViewHeight(resetSize);\n      } else {\n        setStageViewWidth(resetSize);\n      }\n    }\n  };\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getContainerOffset = () => {\n    if (containerRef.current) {\n      const rect = containerRef.current.getBoundingClientRect();\n      return direction === \"vertical\" ? rect.top : rect.left;\n    }\n    return 0;\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"mousemove\", handleDragging);\n    window.addEventListener(\"mouseup\", stopDragging);\n    return () => {\n      window.removeEventListener(\"mousemove\", handleDragging);\n      window.removeEventListener(\"mouseup\", stopDragging);\n    };\n  });\n\n  // If we only have one child, just return it\n  const childrenArray = Children.toArray(props.children).filter(Boolean);\n  if (childrenArray.length === 1) {\n    return <>{childrenArray[0]}</>;\n  }\n\n  const gridTemplate =\n    direction === \"vertical\" ? `${panelSize}px 1fr` : `${panelSize}px 1fr`;\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"pgv-split-view__container\"\n      style={{\n        display: \"grid\",\n        gridTemplateColumns:\n          direction === \"vertical\" ? undefined : gridTemplate,\n        gridTemplateRows: direction === \"vertical\" ? gridTemplate : undefined,\n      }}\n    >\n      <div\n        className={classNames(\"pgv-split-view__side-panel\", {\n          \"pgv-split-view__side-panel--vertical\": direction === \"vertical\",\n        })}\n      >\n        {childrenArray[0]}\n        <div\n          ref={dividerRef}\n          onMouseDown={startDragging}\n          onDoubleClick={handleDoubleClick}\n          className={`pgv-split-view__divider ${\n            direction === \"vertical\" ? \"pgv-split-view__divider--vertical\" : \"\"\n          }`}\n        />\n      </div>\n      <div>{childrenArray[1]}</div>\n    </div>\n  );\n}\n\ninterface SplitViewNewProps {\n  children: ReactNode[];\n  direction?: \"horizontal\" | \"vertical\";\n  storageKey: \"stages\" | \"graph\";\n}\n","// THIS FILE IS AUTOMATICALLY GENERATED DO NOT EDIT DIRECTLY\n// See update-tlds.js for encoding/decoding format\n// https://data.iana.org/TLD/tlds-alpha-by-domain.txt\nconst encodedTlds = 'aaa1rp3bb0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4w0s2x0a2z0ure5ba0by2idu3namex4d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re3c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y3k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking4l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dad1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t1u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d1tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0els3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6properties14fh2g1h1i0a1ds2m1ndle4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3nd0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4k2ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic4v1w1x1y1z2na0b1goya4me2vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rton4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0axi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp3ell3ia1ksha5oes2p0ping5uji3w3i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lvo3te1ing3o2yage5u2wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2';\n// Internationalized domain names containing non-ASCII\nconst encodedUtlds = 'ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2';\n\n/**\n * Finite State Machine generation utilities\n */\n\n/**\n * @template T\n * @typedef {{ [group: string]: T[] }} Collections\n */\n\n/**\n * @typedef {{ [group: string]: true }} Flags\n */\n\n// Keys in scanner Collections instances\nconst numeric = 'numeric';\nconst ascii = 'ascii';\nconst alpha = 'alpha';\nconst asciinumeric = 'asciinumeric';\nconst alphanumeric = 'alphanumeric';\nconst domain = 'domain';\nconst emoji = 'emoji';\nconst scheme = 'scheme';\nconst slashscheme = 'slashscheme';\nconst whitespace = 'whitespace';\n\n/**\n * @template T\n * @param {string} name\n * @param {Collections<T>} groups to register in\n * @returns {T[]} Current list of tokens in the given collection\n */\nfunction registerGroup(name, groups) {\n  if (!(name in groups)) {\n    groups[name] = [];\n  }\n  return groups[name];\n}\n\n/**\n * @template T\n * @param {T} t token to add\n * @param {Collections<T>} groups\n * @param {Flags} flags\n */\nfunction addToGroups(t, flags, groups) {\n  if (flags[numeric]) {\n    flags[asciinumeric] = true;\n    flags[alphanumeric] = true;\n  }\n  if (flags[ascii]) {\n    flags[asciinumeric] = true;\n    flags[alpha] = true;\n  }\n  if (flags[asciinumeric]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alpha]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alphanumeric]) {\n    flags[domain] = true;\n  }\n  if (flags[emoji]) {\n    flags[domain] = true;\n  }\n  for (const k in flags) {\n    const group = registerGroup(k, groups);\n    if (group.indexOf(t) < 0) {\n      group.push(t);\n    }\n  }\n}\n\n/**\n * @template T\n * @param {T} t token to check\n * @param {Collections<T>} groups\n * @returns {Flags} group flags that contain this token\n */\nfunction flagsForToken(t, groups) {\n  const result = {};\n  for (const c in groups) {\n    if (groups[c].indexOf(t) >= 0) {\n      result[c] = true;\n    }\n  }\n  return result;\n}\n\n/**\n * @template T\n * @typedef {null | T } Transition\n */\n\n/**\n * Define a basic state machine state. j is the list of character transitions,\n * jr is the list of regex-match transitions, jd is the default state to\n * transition to t is the accepting token type, if any. If this is the terminal\n * state, then it does not emit a token.\n *\n * The template type T represents the type of the token this state accepts. This\n * should be a string (such as of the token exports in `text.js`) or a\n * MultiToken subclass (from `multi.js`)\n *\n * @template T\n * @param {T} [token] Token that this state emits\n */\nfunction State(token = null) {\n  // this.n = null; // DEBUG: State name\n  /** @type {{ [input: string]: State<T> }} j */\n  this.j = {}; // IMPLEMENTATION 1\n  // this.j = []; // IMPLEMENTATION 2\n  /** @type {[RegExp, State<T>][]} jr */\n  this.jr = [];\n  /** @type {?State<T>} jd */\n  this.jd = null;\n  /** @type {?T} t */\n  this.t = token;\n}\n\n/**\n * Scanner token groups\n * @type Collections<string>\n */\nState.groups = {};\nState.prototype = {\n  accepts() {\n    return !!this.t;\n  },\n  /**\n   * Follow an existing transition from the given input to the next state.\n   * Does not mutate.\n   * @param {string} input character or token type to transition on\n   * @returns {?State<T>} the next state, if any\n   */\n  go(input) {\n    const state = this;\n    const nextState = state.j[input];\n    if (nextState) {\n      return nextState;\n    }\n    for (let i = 0; i < state.jr.length; i++) {\n      const regex = state.jr[i][0];\n      const nextState = state.jr[i][1]; // note: might be empty to prevent default jump\n      if (nextState && regex.test(input)) {\n        return nextState;\n      }\n    }\n    // Nowhere left to jump! Return default, if any\n    return state.jd;\n  },\n  /**\n   * Whether the state has a transition for the given input. Set the second\n   * argument to true to only look for an exact match (and not a default or\n   * regular-expression-based transition)\n   * @param {string} input\n   * @param {boolean} exactOnly\n   */\n  has(input, exactOnly = false) {\n    return exactOnly ? input in this.j : !!this.go(input);\n  },\n  /**\n   * Short for \"transition all\"; create a transition from the array of items\n   * in the given list to the same final resulting state.\n   * @param {string | string[]} inputs Group of inputs to transition on\n   * @param {Transition<T> | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   */\n  ta(inputs, next, flags, groups) {\n    for (let i = 0; i < inputs.length; i++) {\n      this.tt(inputs[i], next, flags, groups);\n    }\n  },\n  /**\n   * Short for \"take regexp transition\"; defines a transition for this state\n   * when it encounters a token which matches the given regular expression\n   * @param {RegExp} regexp Regular expression transition (populate first)\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  tr(regexp, next, flags, groups) {\n    groups = groups || State.groups;\n    let nextState;\n    if (next && next.j) {\n      nextState = next;\n    } else {\n      // Token with maybe token groups\n      nextState = new State(next);\n      if (flags && groups) {\n        addToGroups(next, flags, groups);\n      }\n    }\n    this.jr.push([regexp, nextState]);\n    return nextState;\n  },\n  /**\n   * Short for \"take transitions\", will take as many sequential transitions as\n   * the length of the given input and returns the\n   * resulting final state.\n   * @param {string | string[]} input\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  ts(input, next, flags, groups) {\n    let state = this;\n    const len = input.length;\n    if (!len) {\n      return state;\n    }\n    for (let i = 0; i < len - 1; i++) {\n      state = state.tt(input[i]);\n    }\n    return state.tt(input[len - 1], next, flags, groups);\n  },\n  /**\n   * Short for \"take transition\", this is a method for building/working with\n   * state machines.\n   *\n   * If a state already exists for the given input, returns it.\n   *\n   * If a token is specified, that state will emit that token when reached by\n   * the linkify engine.\n   *\n   * If no state exists, it will be initialized with some default transitions\n   * that resemble existing default transitions.\n   *\n   * If a state is given for the second argument, that state will be\n   * transitioned to on the given input regardless of what that input\n   * previously did.\n   *\n   * Specify a token group flags to define groups that this token belongs to.\n   * The token will be added to corresponding entires in the given groups\n   * object.\n   *\n   * @param {string} input character, token type to transition on\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of groups\n   * @returns {State<T>} taken after the given input\n   */\n  tt(input, next, flags, groups) {\n    groups = groups || State.groups;\n    const state = this;\n\n    // Check if existing state given, just a basic transition\n    if (next && next.j) {\n      state.j[input] = next;\n      return next;\n    }\n    const t = next;\n\n    // Take the transition with the usual default mechanisms and use that as\n    // a template for creating the next state\n    let nextState,\n      templateState = state.go(input);\n    if (templateState) {\n      nextState = new State();\n      Object.assign(nextState.j, templateState.j);\n      nextState.jr.push.apply(nextState.jr, templateState.jr);\n      nextState.jd = templateState.jd;\n      nextState.t = templateState.t;\n    } else {\n      nextState = new State();\n    }\n    if (t) {\n      // Ensure newly token is in the same groups as the old token\n      if (groups) {\n        if (nextState.t && typeof nextState.t === 'string') {\n          const allFlags = Object.assign(flagsForToken(nextState.t, groups), flags);\n          addToGroups(t, allFlags, groups);\n        } else if (flags) {\n          addToGroups(t, flags, groups);\n        }\n      }\n      nextState.t = t; // overwrite anything that was previously there\n    }\n    state.j[input] = nextState;\n    return nextState;\n  }\n};\n\n// Helper functions to improve minification (not exported outside linkifyjs module)\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst ta = (state, input, next, flags, groups) => state.ta(input, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {RegExp} regexp\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst tr = (state, regexp, next, flags, groups) => state.tr(regexp, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst ts = (state, input, next, flags, groups) => state.ts(input, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string} input\n * @param {T | State<T>} [next]\n * @param {Collections<T>} [groups]\n * @param {Flags} [flags]\n */\nconst tt = (state, input, next, flags, groups) => state.tt(input, next, flags, groups);\n\n/******************************************************************************\nText Tokens\nIdentifiers for token outputs from the regexp scanner\n******************************************************************************/\n\n// A valid web domain token\nconst WORD = 'WORD'; // only contains a-z\nconst UWORD = 'UWORD'; // contains letters other than a-z, used for IDN\nconst ASCIINUMERICAL = 'ASCIINUMERICAL'; // contains a-z, 0-9\nconst ALPHANUMERICAL = 'ALPHANUMERICAL'; // contains numbers and letters other than a-z, used for IDN\n\n// Special case of word\nconst LOCALHOST = 'LOCALHOST';\n\n// Valid top-level domain, special case of WORD (see tlds.js)\nconst TLD = 'TLD';\n\n// Valid IDN TLD, special case of UWORD (see tlds.js)\nconst UTLD = 'UTLD';\n\n// The scheme portion of a web URI protocol. Supported types include: `mailto`,\n// `file`, and user-defined custom protocols. Limited to schemes that contain\n// only letters\nconst SCHEME = 'SCHEME';\n\n// Similar to SCHEME, except makes distinction for schemes that must always be\n// followed by `://`, not just `:`. Supported types include `http`, `https`,\n// `ftp`, `ftps`\nconst SLASH_SCHEME = 'SLASH_SCHEME';\n\n// Any sequence of digits 0-9\nconst NUM = 'NUM';\n\n// Any number of consecutive whitespace characters that are not newline\nconst WS = 'WS';\n\n// New line (unix style)\nconst NL = 'NL'; // \\n\n\n// Opening/closing bracket classes\n// TODO: Rename OPEN -> LEFT and CLOSE -> RIGHT in v5 to fit with Unicode names\n// Also rename angle brackes to LESSTHAN and GREATER THAN\nconst OPENBRACE = 'OPENBRACE'; // {\nconst CLOSEBRACE = 'CLOSEBRACE'; // }\nconst OPENBRACKET = 'OPENBRACKET'; // [\nconst CLOSEBRACKET = 'CLOSEBRACKET'; // ]\nconst OPENPAREN = 'OPENPAREN'; // (\nconst CLOSEPAREN = 'CLOSEPAREN'; // )\nconst OPENANGLEBRACKET = 'OPENANGLEBRACKET'; // <\nconst CLOSEANGLEBRACKET = 'CLOSEANGLEBRACKET'; // >\nconst FULLWIDTHLEFTPAREN = 'FULLWIDTHLEFTPAREN'; // （\nconst FULLWIDTHRIGHTPAREN = 'FULLWIDTHRIGHTPAREN'; // ）\nconst LEFTCORNERBRACKET = 'LEFTCORNERBRACKET'; // 「\nconst RIGHTCORNERBRACKET = 'RIGHTCORNERBRACKET'; // 」\nconst LEFTWHITECORNERBRACKET = 'LEFTWHITECORNERBRACKET'; // 『\nconst RIGHTWHITECORNERBRACKET = 'RIGHTWHITECORNERBRACKET'; // 』\nconst FULLWIDTHLESSTHAN = 'FULLWIDTHLESSTHAN'; // ＜\nconst FULLWIDTHGREATERTHAN = 'FULLWIDTHGREATERTHAN'; // ＞\n\n// Various symbols\nconst AMPERSAND = 'AMPERSAND'; // &\nconst APOSTROPHE = 'APOSTROPHE'; // '\nconst ASTERISK = 'ASTERISK'; // *\nconst AT = 'AT'; // @\nconst BACKSLASH = 'BACKSLASH'; // \\\nconst BACKTICK = 'BACKTICK'; // `\nconst CARET = 'CARET'; // ^\nconst COLON = 'COLON'; // :\nconst COMMA = 'COMMA'; // ,\nconst DOLLAR = 'DOLLAR'; // $\nconst DOT = 'DOT'; // .\nconst EQUALS = 'EQUALS'; // =\nconst EXCLAMATION = 'EXCLAMATION'; // !\nconst HYPHEN = 'HYPHEN'; // -\nconst PERCENT = 'PERCENT'; // %\nconst PIPE = 'PIPE'; // |\nconst PLUS = 'PLUS'; // +\nconst POUND = 'POUND'; // #\nconst QUERY = 'QUERY'; // ?\nconst QUOTE = 'QUOTE'; // \"\nconst FULLWIDTHMIDDLEDOT = 'FULLWIDTHMIDDLEDOT'; // ・\n\nconst SEMI = 'SEMI'; // ;\nconst SLASH = 'SLASH'; // /\nconst TILDE = 'TILDE'; // ~\nconst UNDERSCORE = 'UNDERSCORE'; // _\n\n// Emoji symbol\nconst EMOJI$1 = 'EMOJI';\n\n// Default token - anything that is not one of the above\nconst SYM = 'SYM';\n\nvar tk = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tALPHANUMERICAL: ALPHANUMERICAL,\n\tAMPERSAND: AMPERSAND,\n\tAPOSTROPHE: APOSTROPHE,\n\tASCIINUMERICAL: ASCIINUMERICAL,\n\tASTERISK: ASTERISK,\n\tAT: AT,\n\tBACKSLASH: BACKSLASH,\n\tBACKTICK: BACKTICK,\n\tCARET: CARET,\n\tCLOSEANGLEBRACKET: CLOSEANGLEBRACKET,\n\tCLOSEBRACE: CLOSEBRACE,\n\tCLOSEBRACKET: CLOSEBRACKET,\n\tCLOSEPAREN: CLOSEPAREN,\n\tCOLON: COLON,\n\tCOMMA: COMMA,\n\tDOLLAR: DOLLAR,\n\tDOT: DOT,\n\tEMOJI: EMOJI$1,\n\tEQUALS: EQUALS,\n\tEXCLAMATION: EXCLAMATION,\n\tFULLWIDTHGREATERTHAN: FULLWIDTHGREATERTHAN,\n\tFULLWIDTHLEFTPAREN: FULLWIDTHLEFTPAREN,\n\tFULLWIDTHLESSTHAN: FULLWIDTHLESSTHAN,\n\tFULLWIDTHMIDDLEDOT: FULLWIDTHMIDDLEDOT,\n\tFULLWIDTHRIGHTPAREN: FULLWIDTHRIGHTPAREN,\n\tHYPHEN: HYPHEN,\n\tLEFTCORNERBRACKET: LEFTCORNERBRACKET,\n\tLEFTWHITECORNERBRACKET: LEFTWHITECORNERBRACKET,\n\tLOCALHOST: LOCALHOST,\n\tNL: NL,\n\tNUM: NUM,\n\tOPENANGLEBRACKET: OPENANGLEBRACKET,\n\tOPENBRACE: OPENBRACE,\n\tOPENBRACKET: OPENBRACKET,\n\tOPENPAREN: OPENPAREN,\n\tPERCENT: PERCENT,\n\tPIPE: PIPE,\n\tPLUS: PLUS,\n\tPOUND: POUND,\n\tQUERY: QUERY,\n\tQUOTE: QUOTE,\n\tRIGHTCORNERBRACKET: RIGHTCORNERBRACKET,\n\tRIGHTWHITECORNERBRACKET: RIGHTWHITECORNERBRACKET,\n\tSCHEME: SCHEME,\n\tSEMI: SEMI,\n\tSLASH: SLASH,\n\tSLASH_SCHEME: SLASH_SCHEME,\n\tSYM: SYM,\n\tTILDE: TILDE,\n\tTLD: TLD,\n\tUNDERSCORE: UNDERSCORE,\n\tUTLD: UTLD,\n\tUWORD: UWORD,\n\tWORD: WORD,\n\tWS: WS\n});\n\n// Note that these two Unicode ones expand into a really big one with Babel\nconst ASCII_LETTER = /[a-z]/;\nconst LETTER = /\\p{L}/u; // Any Unicode character with letter data type\nconst EMOJI = /\\p{Emoji}/u; // Any Unicode emoji character\nconst EMOJI_VARIATION$1 = /\\ufe0f/;\nconst DIGIT = /\\d/;\nconst SPACE = /\\s/;\n\nvar regexp = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tASCII_LETTER: ASCII_LETTER,\n\tDIGIT: DIGIT,\n\tEMOJI: EMOJI,\n\tEMOJI_VARIATION: EMOJI_VARIATION$1,\n\tLETTER: LETTER,\n\tSPACE: SPACE\n});\n\n/**\n\tThe scanner provides an interface that takes a string of text as input, and\n\toutputs an array of tokens instances that can be used for easy URL parsing.\n*/\n\nconst CR = '\\r'; // carriage-return character\nconst LF = '\\n'; // line-feed character\nconst EMOJI_VARIATION = '\\ufe0f'; // Variation selector, follows heart and others\nconst EMOJI_JOINER = '\\u200d'; // zero-width joiner\nconst OBJECT_REPLACEMENT = '\\ufffc'; // whitespace placeholder that sometimes appears in rich text editors\n\nlet tlds = null,\n  utlds = null; // don't change so only have to be computed once\n\n/**\n * Scanner output token:\n * - `t` is the token name (e.g., 'NUM', 'EMOJI', 'TLD')\n * - `v` is the value of the token (e.g., '123', '❤️', 'com')\n * - `s` is the start index of the token in the original string\n * - `e` is the end index of the token in the original string\n * @typedef {{t: string, v: string, s: number, e: number}} Token\n */\n\n/**\n * @template T\n * @typedef {{ [collection: string]: T[] }} Collections\n */\n\n/**\n * Initialize the scanner character-based state machine for the given start\n * state\n * @param {[string, boolean][]} customSchemes List of custom schemes, where each\n * item is a length-2 tuple with the first element set to the string scheme, and\n * the second element set to `true` if the `://` after the scheme is optional\n */\nfunction init$2(customSchemes = []) {\n  // Frequently used states (name argument removed during minification)\n  /** @type Collections<string> */\n  const groups = {}; // of tokens\n  State.groups = groups;\n  /** @type State<string> */\n  const Start = new State();\n  if (tlds == null) {\n    tlds = decodeTlds(encodedTlds);\n  }\n  if (utlds == null) {\n    utlds = decodeTlds(encodedUtlds);\n  }\n\n  // States for special URL symbols that accept immediately after start\n  tt(Start, \"'\", APOSTROPHE);\n  tt(Start, '{', OPENBRACE);\n  tt(Start, '}', CLOSEBRACE);\n  tt(Start, '[', OPENBRACKET);\n  tt(Start, ']', CLOSEBRACKET);\n  tt(Start, '(', OPENPAREN);\n  tt(Start, ')', CLOSEPAREN);\n  tt(Start, '<', OPENANGLEBRACKET);\n  tt(Start, '>', CLOSEANGLEBRACKET);\n  tt(Start, '（', FULLWIDTHLEFTPAREN);\n  tt(Start, '）', FULLWIDTHRIGHTPAREN);\n  tt(Start, '「', LEFTCORNERBRACKET);\n  tt(Start, '」', RIGHTCORNERBRACKET);\n  tt(Start, '『', LEFTWHITECORNERBRACKET);\n  tt(Start, '』', RIGHTWHITECORNERBRACKET);\n  tt(Start, '＜', FULLWIDTHLESSTHAN);\n  tt(Start, '＞', FULLWIDTHGREATERTHAN);\n  tt(Start, '&', AMPERSAND);\n  tt(Start, '*', ASTERISK);\n  tt(Start, '@', AT);\n  tt(Start, '`', BACKTICK);\n  tt(Start, '^', CARET);\n  tt(Start, ':', COLON);\n  tt(Start, ',', COMMA);\n  tt(Start, '$', DOLLAR);\n  tt(Start, '.', DOT);\n  tt(Start, '=', EQUALS);\n  tt(Start, '!', EXCLAMATION);\n  tt(Start, '-', HYPHEN);\n  tt(Start, '%', PERCENT);\n  tt(Start, '|', PIPE);\n  tt(Start, '+', PLUS);\n  tt(Start, '#', POUND);\n  tt(Start, '?', QUERY);\n  tt(Start, '\"', QUOTE);\n  tt(Start, '/', SLASH);\n  tt(Start, ';', SEMI);\n  tt(Start, '~', TILDE);\n  tt(Start, '_', UNDERSCORE);\n  tt(Start, '\\\\', BACKSLASH);\n  tt(Start, '・', FULLWIDTHMIDDLEDOT);\n  const Num = tr(Start, DIGIT, NUM, {\n    [numeric]: true\n  });\n  tr(Num, DIGIT, Num);\n  const Asciinumeric = tr(Num, ASCII_LETTER, ASCIINUMERICAL, {\n    [asciinumeric]: true\n  });\n  const Alphanumeric = tr(Num, LETTER, ALPHANUMERICAL, {\n    [alphanumeric]: true\n  });\n\n  // State which emits a word token\n  const Word = tr(Start, ASCII_LETTER, WORD, {\n    [ascii]: true\n  });\n  tr(Word, DIGIT, Asciinumeric);\n  tr(Word, ASCII_LETTER, Word);\n  tr(Asciinumeric, DIGIT, Asciinumeric);\n  tr(Asciinumeric, ASCII_LETTER, Asciinumeric);\n\n  // Same as previous, but specific to non-fsm.ascii alphabet words\n  const UWord = tr(Start, LETTER, UWORD, {\n    [alpha]: true\n  });\n  tr(UWord, ASCII_LETTER); // Non-accepting\n  tr(UWord, DIGIT, Alphanumeric);\n  tr(UWord, LETTER, UWord);\n  tr(Alphanumeric, DIGIT, Alphanumeric);\n  tr(Alphanumeric, ASCII_LETTER); // Non-accepting\n  tr(Alphanumeric, LETTER, Alphanumeric); // Non-accepting\n\n  // Whitespace jumps\n  // Tokens of only non-newline whitespace are arbitrarily long\n  // If any whitespace except newline, more whitespace!\n  const Nl = tt(Start, LF, NL, {\n    [whitespace]: true\n  });\n  const Cr = tt(Start, CR, WS, {\n    [whitespace]: true\n  });\n  const Ws = tr(Start, SPACE, WS, {\n    [whitespace]: true\n  });\n  tt(Start, OBJECT_REPLACEMENT, Ws);\n  tt(Cr, LF, Nl); // \\r\\n\n  tt(Cr, OBJECT_REPLACEMENT, Ws);\n  tr(Cr, SPACE, Ws);\n  tt(Ws, CR); // non-accepting state to avoid mixing whitespaces\n  tt(Ws, LF); // non-accepting state to avoid mixing whitespaces\n  tr(Ws, SPACE, Ws);\n  tt(Ws, OBJECT_REPLACEMENT, Ws);\n\n  // Emoji tokens. They are not grouped by the scanner except in cases where a\n  // zero-width joiner is present\n  const Emoji = tr(Start, EMOJI, EMOJI$1, {\n    [emoji]: true\n  });\n  tt(Emoji, '#'); // no transition, emoji regex seems to match #\n  tr(Emoji, EMOJI, Emoji);\n  tt(Emoji, EMOJI_VARIATION, Emoji);\n  // tt(Start, EMOJI_VARIATION, Emoji); // This one is sketchy\n\n  const EmojiJoiner = tt(Emoji, EMOJI_JOINER);\n  tt(EmojiJoiner, '#');\n  tr(EmojiJoiner, EMOJI, Emoji);\n  // tt(EmojiJoiner, EMOJI_VARIATION, Emoji); // also sketchy\n\n  // Generates states for top-level domains\n  // Note that this is most accurate when tlds are in alphabetical order\n  const wordjr = [[ASCII_LETTER, Word], [DIGIT, Asciinumeric]];\n  const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord], [DIGIT, Alphanumeric]];\n  for (let i = 0; i < tlds.length; i++) {\n    fastts(Start, tlds[i], TLD, WORD, wordjr);\n  }\n  for (let i = 0; i < utlds.length; i++) {\n    fastts(Start, utlds[i], UTLD, UWORD, uwordjr);\n  }\n  addToGroups(TLD, {\n    tld: true,\n    ascii: true\n  }, groups);\n  addToGroups(UTLD, {\n    utld: true,\n    alpha: true\n  }, groups);\n\n  // Collect the states generated by different protocols. NOTE: If any new TLDs\n  // get added that are also protocols, set the token to be the same as the\n  // protocol to ensure parsing works as expected.\n  fastts(Start, 'file', SCHEME, WORD, wordjr);\n  fastts(Start, 'mailto', SCHEME, WORD, wordjr);\n  fastts(Start, 'http', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'https', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftp', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftps', SLASH_SCHEME, WORD, wordjr);\n  addToGroups(SCHEME, {\n    scheme: true,\n    ascii: true\n  }, groups);\n  addToGroups(SLASH_SCHEME, {\n    slashscheme: true,\n    ascii: true\n  }, groups);\n\n  // Register custom schemes. Assumes each scheme is asciinumeric with hyphens\n  customSchemes = customSchemes.sort((a, b) => a[0] > b[0] ? 1 : -1);\n  for (let i = 0; i < customSchemes.length; i++) {\n    const sch = customSchemes[i][0];\n    const optionalSlashSlash = customSchemes[i][1];\n    const flags = optionalSlashSlash ? {\n      [scheme]: true\n    } : {\n      [slashscheme]: true\n    };\n    if (sch.indexOf('-') >= 0) {\n      flags[domain] = true;\n    } else if (!ASCII_LETTER.test(sch)) {\n      flags[numeric] = true; // numbers only\n    } else if (DIGIT.test(sch)) {\n      flags[asciinumeric] = true;\n    } else {\n      flags[ascii] = true;\n    }\n    ts(Start, sch, sch, flags);\n  }\n\n  // Localhost token\n  ts(Start, 'localhost', LOCALHOST, {\n    ascii: true\n  });\n\n  // Set default transition for start state (some symbol)\n  Start.jd = new State(SYM);\n  return {\n    start: Start,\n    tokens: Object.assign({\n      groups\n    }, tk)\n  };\n}\n\n/**\n\tGiven a string, returns an array of TOKEN instances representing the\n\tcomposition of that string.\n\n\t@method run\n\t@param {State<string>} start scanner starting state\n\t@param {string} str input string to scan\n\t@return {Token[]} list of tokens, each with a type and value\n*/\nfunction run$1(start, str) {\n  // State machine is not case sensitive, so input is tokenized in lowercased\n  // form (still returns regular case). Uses selective `toLowerCase` because\n  // lowercasing the entire string causes the length and character position to\n  // vary in some non-English strings with V8-based runtimes.\n  const iterable = stringToArray(str.replace(/[A-Z]/g, c => c.toLowerCase()));\n  const charCount = iterable.length; // <= len if there are emojis, etc\n  const tokens = []; // return value\n\n  // cursor through the string itself, accounting for characters that have\n  // width with length 2 such as emojis\n  let cursor = 0;\n\n  // Cursor through the array-representation of the string\n  let charCursor = 0;\n\n  // Tokenize the string\n  while (charCursor < charCount) {\n    let state = start;\n    let nextState = null;\n    let tokenLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    let charsSinceAccepts = -1;\n    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        charsSinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts += iterable[charCursor].length;\n        charsSinceAccepts++;\n      }\n      tokenLength += iterable[charCursor].length;\n      cursor += iterable[charCursor].length;\n      charCursor++;\n    }\n\n    // Roll back to the latest accepting state\n    cursor -= sinceAccepts;\n    charCursor -= charsSinceAccepts;\n    tokenLength -= sinceAccepts;\n\n    // No more jumps, just make a new token from the last accepting one\n    tokens.push({\n      t: latestAccepting.t,\n      // token type/name\n      v: str.slice(cursor - tokenLength, cursor),\n      // string value\n      s: cursor - tokenLength,\n      // start index\n      e: cursor // end index (excluding)\n    });\n  }\n  return tokens;\n}\n\n/**\n * Convert a String to an Array of characters, taking into account that some\n * characters like emojis take up two string indexes.\n *\n * Adapted from core-js (MIT license)\n * https://github.com/zloirock/core-js/blob/2d69cf5f99ab3ea3463c395df81e5a15b68f49d9/packages/core-js/internals/string-multibyte.js\n *\n * @function stringToArray\n * @param {string} str\n * @returns {string[]}\n */\nfunction stringToArray(str) {\n  const result = [];\n  const len = str.length;\n  let index = 0;\n  while (index < len) {\n    let first = str.charCodeAt(index);\n    let second;\n    let char = first < 0xd800 || first > 0xdbff || index + 1 === len || (second = str.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? str[index] // single character\n    : str.slice(index, index + 2); // two-index characters\n    result.push(char);\n    index += char.length;\n  }\n  return result;\n}\n\n/**\n * Fast version of ts function for when transition defaults are well known\n * @param {State<string>} state\n * @param {string} input\n * @param {string} t\n * @param {string} defaultt\n * @param {[RegExp, State<string>][]} jr\n * @returns {State<string>}\n */\nfunction fastts(state, input, t, defaultt, jr) {\n  let next;\n  const len = input.length;\n  for (let i = 0; i < len - 1; i++) {\n    const char = input[i];\n    if (state.j[char]) {\n      next = state.j[char];\n    } else {\n      next = new State(defaultt);\n      next.jr = jr.slice();\n      state.j[char] = next;\n    }\n    state = next;\n  }\n  next = new State(t);\n  next.jr = jr.slice();\n  state.j[input[len - 1]] = next;\n  return next;\n}\n\n/**\n * Converts a string of Top-Level Domain names encoded in update-tlds.js back\n * into a list of strings.\n * @param {str} encoded encoded TLDs string\n * @returns {str[]} original TLDs list\n */\nfunction decodeTlds(encoded) {\n  const words = [];\n  const stack = [];\n  let i = 0;\n  let digits = '0123456789';\n  while (i < encoded.length) {\n    let popDigitCount = 0;\n    while (digits.indexOf(encoded[i + popDigitCount]) >= 0) {\n      popDigitCount++; // encountered some digits, have to pop to go one level up trie\n    }\n    if (popDigitCount > 0) {\n      words.push(stack.join('')); // whatever preceded the pop digits must be a word\n      for (let popCount = parseInt(encoded.substring(i, i + popDigitCount), 10); popCount > 0; popCount--) {\n        stack.pop();\n      }\n      i += popDigitCount;\n    } else {\n      stack.push(encoded[i]); // drop down a level into the trie\n      i++;\n    }\n  }\n  return words;\n}\n\n/**\n * An object where each key is a valid DOM Event Name such as `click` or `focus`\n * and each value is an event handler function.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Element#events\n * @typedef {?{ [event: string]: Function }} EventListeners\n */\n\n/**\n * All formatted properties required to render a link, including `tagName`,\n * `attributes`, `content` and `eventListeners`.\n * @typedef {{ tagName: any, attributes: {[attr: string]: any}, content: string,\n * eventListeners: EventListeners }} IntermediateRepresentation\n */\n\n/**\n * Specify either an object described by the template type `O` or a function.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `O`\n * @template O\n * @typedef {O | ((value: string, type: string, token: MultiToken) => O)} OptObj\n */\n\n/**\n * Specify either a function described by template type `F` or an object.\n *\n * Each key in the object should be a link type (`'url'`, `'hashtag`', etc.). Each\n * value should be a function with template type `F` that is called when the\n * corresponding link type is encountered.\n * @template F\n * @typedef {F | { [type: string]: F}} OptFn\n */\n\n/**\n * Specify either a value with template type `V`, a function that returns `V` or\n * an object where each value resolves to `V`.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `V`\n *\n * For the object, each key should be a link type (`'url'`, `'hashtag`', etc.).\n * Each value should either have type `V` or a function that returns V. This\n * function similarly takes a string value and a token.\n *\n * Example valid types for `Opt<string>`:\n *\n * ```js\n * 'hello'\n * (value, type, token) => 'world'\n * { url: 'hello', email: (value, token) => 'world'}\n * ```\n * @template V\n * @typedef {V | ((value: string, type: string, token: MultiToken) => V) | { [type: string]: V | ((value: string, token: MultiToken) => V) }} Opt\n */\n\n/**\n * See available options: https://linkify.js.org/docs/options.html\n * @typedef {{\n * \tdefaultProtocol?: string,\n *  events?: OptObj<EventListeners>,\n * \tformat?: Opt<string>,\n * \tformatHref?: Opt<string>,\n * \tnl2br?: boolean,\n * \ttagName?: Opt<any>,\n * \ttarget?: Opt<string>,\n * \trel?: Opt<string>,\n * \tvalidate?: Opt<boolean>,\n * \ttruncate?: Opt<number>,\n * \tclassName?: Opt<string>,\n * \tattributes?: OptObj<({ [attr: string]: any })>,\n *  ignoreTags?: string[],\n * \trender?: OptFn<((ir: IntermediateRepresentation) => any)>\n * }} Opts\n */\n\n/**\n * @type Required<Opts>\n */\nconst defaults = {\n  defaultProtocol: 'http',\n  events: null,\n  format: noop,\n  formatHref: noop,\n  nl2br: false,\n  tagName: 'a',\n  target: null,\n  rel: null,\n  validate: true,\n  truncate: Infinity,\n  className: null,\n  attributes: null,\n  ignoreTags: [],\n  render: null\n};\n\n/**\n * Utility class for linkify interfaces to apply specified\n * {@link Opts formatting and rendering options}.\n *\n * @param {Opts | Options} [opts] Option value overrides.\n * @param {(ir: IntermediateRepresentation) => any} [defaultRender] (For\n *   internal use) default render function that determines how to generate an\n *   HTML element based on a link token's derived tagName, attributes and HTML.\n *   Similar to render option\n */\nfunction Options(opts, defaultRender = null) {\n  let o = Object.assign({}, defaults);\n  if (opts) {\n    o = Object.assign(o, opts instanceof Options ? opts.o : opts);\n  }\n\n  // Ensure all ignored tags are uppercase\n  const ignoredTags = o.ignoreTags;\n  const uppercaseIgnoredTags = [];\n  for (let i = 0; i < ignoredTags.length; i++) {\n    uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());\n  }\n  /** @protected */\n  this.o = o;\n  if (defaultRender) {\n    this.defaultRender = defaultRender;\n  }\n  this.ignoreTags = uppercaseIgnoredTags;\n}\nOptions.prototype = {\n  o: defaults,\n  /**\n   * @type string[]\n   */\n  ignoreTags: [],\n  /**\n   * @param {IntermediateRepresentation} ir\n   * @returns {any}\n   */\n  defaultRender(ir) {\n    return ir;\n  },\n  /**\n   * Returns true or false based on whether a token should be displayed as a\n   * link based on the user options.\n   * @param {MultiToken} token\n   * @returns {boolean}\n   */\n  check(token) {\n    return this.get('validate', token.toString(), token);\n  },\n  // Private methods\n\n  /**\n   * Resolve an option's value based on the value of the option and the given\n   * params. If operator and token are specified and the target option is\n   * callable, automatically calls the function with the given argument.\n   * @template {keyof Opts} K\n   * @param {K} key Name of option to use\n   * @param {string} [operator] will be passed to the target option if it's a\n   * function. If not specified, RAW function value gets returned\n   * @param {MultiToken} [token] The token from linkify.tokenize\n   * @returns {Opts[K] | any}\n   */\n  get(key, operator, token) {\n    const isCallable = operator != null;\n    let option = this.o[key];\n    if (!option) {\n      return option;\n    }\n    if (typeof option === 'object') {\n      option = token.t in option ? option[token.t] : defaults[key];\n      if (typeof option === 'function' && isCallable) {\n        option = option(operator, token);\n      }\n    } else if (typeof option === 'function' && isCallable) {\n      option = option(operator, token.t, token);\n    }\n    return option;\n  },\n  /**\n   * @template {keyof Opts} L\n   * @param {L} key Name of options object to use\n   * @param {string} [operator]\n   * @param {MultiToken} [token]\n   * @returns {Opts[L] | any}\n   */\n  getObj(key, operator, token) {\n    let obj = this.o[key];\n    if (typeof obj === 'function' && operator != null) {\n      obj = obj(operator, token.t, token);\n    }\n    return obj;\n  },\n  /**\n   * Convert the given token to a rendered element that may be added to the\n   * calling-interface's DOM\n   * @param {MultiToken} token Token to render to an HTML element\n   * @returns {any} Render result; e.g., HTML string, DOM element, React\n   *   Component, etc.\n   */\n  render(token) {\n    const ir = token.render(this); // intermediate representation\n    const renderFn = this.get('render', null, token) || this.defaultRender;\n    return renderFn(ir, token.t, token);\n  }\n};\nfunction noop(val) {\n  return val;\n}\n\nvar options = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tOptions: Options,\n\tdefaults: defaults\n});\n\n/******************************************************************************\n\tMulti-Tokens\n\tTokens composed of arrays of TextTokens\n******************************************************************************/\n\n/**\n * @param {string} value\n * @param {Token[]} tokens\n */\nfunction MultiToken(value, tokens) {\n  this.t = 'token';\n  this.v = value;\n  this.tk = tokens;\n}\n\n/**\n * Abstract class used for manufacturing tokens of text tokens. That is rather\n * than the value for a token being a small string of text, it's value an array\n * of text tokens.\n *\n * Used for grouping together URLs, emails, hashtags, and other potential\n * creations.\n * @class MultiToken\n * @property {string} t\n * @property {string} v\n * @property {Token[]} tk\n * @abstract\n */\nMultiToken.prototype = {\n  isLink: false,\n  /**\n   * Return the string this token represents.\n   * @return {string}\n   */\n  toString() {\n    return this.v;\n  },\n  /**\n   * What should the value for this token be in the `href` HTML attribute?\n   * Returns the `.toString` value by default.\n   * @param {string} [scheme]\n   * @return {string}\n   */\n  toHref(scheme) {\n    return this.toString();\n  },\n  /**\n   * @param {Options} options Formatting options\n   * @returns {string}\n   */\n  toFormattedString(options) {\n    const val = this.toString();\n    const truncate = options.get('truncate', val, this);\n    const formatted = options.get('format', val, this);\n    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + '…' : formatted;\n  },\n  /**\n   *\n   * @param {Options} options\n   * @returns {string}\n   */\n  toFormattedHref(options) {\n    return options.get('formatHref', this.toHref(options.get('defaultProtocol')), this);\n  },\n  /**\n   * The start index of this token in the original input string\n   * @returns {number}\n   */\n  startIndex() {\n    return this.tk[0].s;\n  },\n  /**\n   * The end index of this token in the original input string (up to this\n   * index but not including it)\n   * @returns {number}\n   */\n  endIndex() {\n    return this.tk[this.tk.length - 1].e;\n  },\n  /**\n  \tReturns an object  of relevant values for this token, which includes keys\n  \t* type - Kind of token ('url', 'email', etc.)\n  \t* value - Original text\n  \t* href - The value that should be added to the anchor tag's href\n  \t\tattribute\n  \t\t@method toObject\n  \t@param {string} [protocol] `'http'` by default\n  */\n  toObject(protocol = defaults.defaultProtocol) {\n    return {\n      type: this.t,\n      value: this.toString(),\n      isLink: this.isLink,\n      href: this.toHref(protocol),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   *\n   * @param {Options} options Formatting option\n   */\n  toFormattedObject(options) {\n    return {\n      type: this.t,\n      value: this.toFormattedString(options),\n      isLink: this.isLink,\n      href: this.toFormattedHref(options),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   * Whether this token should be rendered as a link according to the given options\n   * @param {Options} options\n   * @returns {boolean}\n   */\n  validate(options) {\n    return options.get('validate', this.toString(), this);\n  },\n  /**\n   * Return an object that represents how this link should be rendered.\n   * @param {Options} options Formattinng options\n   */\n  render(options) {\n    const token = this;\n    const href = this.toHref(options.get('defaultProtocol'));\n    const formattedHref = options.get('formatHref', href, this);\n    const tagName = options.get('tagName', href, token);\n    const content = this.toFormattedString(options);\n    const attributes = {};\n    const className = options.get('className', href, token);\n    const target = options.get('target', href, token);\n    const rel = options.get('rel', href, token);\n    const attrs = options.getObj('attributes', href, token);\n    const eventListeners = options.getObj('events', href, token);\n    attributes.href = formattedHref;\n    if (className) {\n      attributes.class = className;\n    }\n    if (target) {\n      attributes.target = target;\n    }\n    if (rel) {\n      attributes.rel = rel;\n    }\n    if (attrs) {\n      Object.assign(attributes, attrs);\n    }\n    return {\n      tagName,\n      attributes,\n      content,\n      eventListeners\n    };\n  }\n};\n\n/**\n * Create a new token that can be emitted by the parser state machine\n * @param {string} type readable type of the token\n * @param {object} props properties to assign or override, including isLink = true or false\n * @returns {new (value: string, tokens: Token[]) => MultiToken} new token class\n */\nfunction createTokenClass(type, props) {\n  class Token extends MultiToken {\n    constructor(value, tokens) {\n      super(value, tokens);\n      this.t = type;\n    }\n  }\n  for (const p in props) {\n    Token.prototype[p] = props[p];\n  }\n  Token.t = type;\n  return Token;\n}\n\n/**\n\tRepresents a list of tokens making up a valid email address\n*/\nconst Email = createTokenClass('email', {\n  isLink: true,\n  toHref() {\n    return 'mailto:' + this.toString();\n  }\n});\n\n/**\n\tRepresents some plain text\n*/\nconst Text = createTokenClass('text');\n\n/**\n\tMulti-linebreak token - represents a line break\n\t@class Nl\n*/\nconst Nl = createTokenClass('nl');\n\n/**\n\tRepresents a list of text tokens making up a valid URL\n\t@class Url\n*/\nconst Url = createTokenClass('url', {\n  isLink: true,\n  /**\n  \tLowercases relevant parts of the domain and adds the protocol if\n  \trequired. Note that this will not escape unsafe HTML characters in the\n  \tURL.\n  \t\t@param {string} [scheme] default scheme (e.g., 'https')\n  \t@return {string} the full href\n  */\n  toHref(scheme = defaults.defaultProtocol) {\n    // Check if already has a prefix scheme\n    return this.hasProtocol() ? this.v : `${scheme}://${this.v}`;\n  },\n  /**\n   * Check whether this URL token has a protocol\n   * @return {boolean}\n   */\n  hasProtocol() {\n    const tokens = this.tk;\n    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;\n  }\n});\n\nvar multi = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBase: MultiToken,\n\tEmail: Email,\n\tMultiToken: MultiToken,\n\tNl: Nl,\n\tText: Text,\n\tUrl: Url,\n\tcreateTokenClass: createTokenClass\n});\n\n/**\n\tNot exactly parser, more like the second-stage scanner (although we can\n\ttheoretically hotswap the code here with a real parser in the future... but\n\tfor a little URL-finding utility abstract syntax trees may be a little\n\toverkill).\n\n\tURL format: http://en.wikipedia.org/wiki/URI_scheme\n\tEmail format: http://en.wikipedia.org/wiki/EmailAddress (links to RFC in\n\treference)\n\n\t@module linkify\n\t@submodule parser\n\t@main run\n*/\n\nconst makeState = arg => new State(arg);\n\n/**\n * Generate the parser multi token-based state machine\n * @param {{ groups: Collections<string> }} tokens\n */\nfunction init$1({\n  groups\n}) {\n  // Types of characters the URL can definitely end in\n  const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);\n\n  // Types of tokens that can follow a URL and be part of the query string\n  // but cannot be the very last characters\n  // Characters that cannot appear in the URL at all should be excluded\n  const qsNonAccepting = [APOSTROPHE, COLON, COMMA, DOT, EXCLAMATION, PERCENT, QUERY, QUOTE, SEMI, OPENANGLEBRACKET, CLOSEANGLEBRACKET, OPENBRACE, CLOSEBRACE, CLOSEBRACKET, OPENBRACKET, OPENPAREN, CLOSEPAREN, FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN, LEFTCORNERBRACKET, RIGHTCORNERBRACKET, LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET, FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN];\n\n  // For addresses without the mailto prefix\n  // Tokens allowed in the localpart of the email\n  const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, OPENBRACE, CLOSEBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];\n\n  // The universal starting state.\n  /**\n   * @type State<Token>\n   */\n  const Start = makeState();\n  const Localpart = tt(Start, TILDE); // Local part of the email address\n  ta(Localpart, localpartAccepting, Localpart);\n  ta(Localpart, groups.domain, Localpart);\n  const Domain = makeState(),\n    Scheme = makeState(),\n    SlashScheme = makeState();\n  ta(Start, groups.domain, Domain); // parsed string ends with a potential domain name (A)\n  ta(Start, groups.scheme, Scheme); // e.g., 'mailto'\n  ta(Start, groups.slashscheme, SlashScheme); // e.g., 'http'\n\n  ta(Domain, localpartAccepting, Localpart);\n  ta(Domain, groups.domain, Domain);\n  const LocalpartAt = tt(Domain, AT); // Local part of the email address plus @\n\n  tt(Localpart, AT, LocalpartAt); // close to an email address now\n\n  // Local part of an email address can be e.g. 'http' or 'mailto'\n  tt(Scheme, AT, LocalpartAt);\n  tt(SlashScheme, AT, LocalpartAt);\n  const LocalpartDot = tt(Localpart, DOT); // Local part of the email address plus '.' (localpart cannot end in .)\n  ta(LocalpartDot, localpartAccepting, Localpart);\n  ta(LocalpartDot, groups.domain, Localpart);\n  const EmailDomain = makeState();\n  ta(LocalpartAt, groups.domain, EmailDomain); // parsed string starts with local email info + @ with a potential domain name\n  ta(EmailDomain, groups.domain, EmailDomain);\n  const EmailDomainDot = tt(EmailDomain, DOT); // domain followed by DOT\n  ta(EmailDomainDot, groups.domain, EmailDomain);\n  const Email$1 = makeState(Email); // Possible email address (could have more tlds)\n  ta(EmailDomainDot, groups.tld, Email$1);\n  ta(EmailDomainDot, groups.utld, Email$1);\n  tt(LocalpartAt, LOCALHOST, Email$1);\n\n  // Hyphen can jump back to a domain name\n  const EmailDomainHyphen = tt(EmailDomain, HYPHEN); // parsed string starts with local email info + @ with a potential domain name\n  tt(EmailDomainHyphen, HYPHEN, EmailDomainHyphen);\n  ta(EmailDomainHyphen, groups.domain, EmailDomain);\n  ta(Email$1, groups.domain, EmailDomain);\n  tt(Email$1, DOT, EmailDomainDot);\n  tt(Email$1, HYPHEN, EmailDomainHyphen);\n\n  // Final possible email states\n  const EmailColon = tt(Email$1, COLON); // URL followed by colon (potential port number here)\n  /*const EmailColonPort = */\n  ta(EmailColon, groups.numeric, Email); // URL followed by colon and port number\n\n  // Account for dots and hyphens. Hyphens are usually parts of domain names\n  // (but not TLDs)\n  const DomainHyphen = tt(Domain, HYPHEN); // domain followed by hyphen\n  const DomainDot = tt(Domain, DOT); // domain followed by DOT\n  tt(DomainHyphen, HYPHEN, DomainHyphen);\n  ta(DomainHyphen, groups.domain, Domain);\n  ta(DomainDot, localpartAccepting, Localpart);\n  ta(DomainDot, groups.domain, Domain);\n  const DomainDotTld = makeState(Url); // Simplest possible URL with no query string\n  ta(DomainDot, groups.tld, DomainDotTld);\n  ta(DomainDot, groups.utld, DomainDotTld);\n  ta(DomainDotTld, groups.domain, Domain);\n  ta(DomainDotTld, localpartAccepting, Localpart);\n  tt(DomainDotTld, DOT, DomainDot);\n  tt(DomainDotTld, HYPHEN, DomainHyphen);\n  tt(DomainDotTld, AT, LocalpartAt);\n  const DomainDotTldColon = tt(DomainDotTld, COLON); // URL followed by colon (potential port number here)\n  const DomainDotTldColonPort = makeState(Url); // TLD followed by a port number\n  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);\n\n  // Long URL with optional port and maybe query string\n  const Url$1 = makeState(Url);\n\n  // URL with extra symbols at the end, followed by an opening bracket\n  const UrlNonaccept = makeState(); // URL followed by some symbols (will not be part of the final URL)\n\n  // Query strings\n  ta(Url$1, qsAccepting, Url$1);\n  ta(Url$1, qsNonAccepting, UrlNonaccept);\n  ta(UrlNonaccept, qsAccepting, Url$1);\n  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);\n\n  // Become real URLs after `SLASH` or `COLON NUM SLASH`\n  // Here works with or without scheme:// prefix\n  tt(DomainDotTld, SLASH, Url$1);\n  tt(DomainDotTldColonPort, SLASH, Url$1);\n\n  // Note that domains that begin with schemes are treated slighly differently\n  const SchemeColon = tt(Scheme, COLON); // e.g., 'mailto:'\n  const SlashSchemeColon = tt(SlashScheme, COLON); // e.g., 'http:'\n  const SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH); // e.g., 'http:/'\n\n  const UriPrefix = tt(SlashSchemeColonSlash, SLASH); // e.g., 'http://'\n\n  // Scheme states can transition to domain states\n  ta(Scheme, groups.domain, Domain);\n  tt(Scheme, DOT, DomainDot);\n  tt(Scheme, HYPHEN, DomainHyphen);\n  ta(SlashScheme, groups.domain, Domain);\n  tt(SlashScheme, DOT, DomainDot);\n  tt(SlashScheme, HYPHEN, DomainHyphen);\n\n  // Force URL with scheme prefix followed by anything sane\n  ta(SchemeColon, groups.domain, Url$1);\n  tt(SchemeColon, SLASH, Url$1);\n  tt(SchemeColon, QUERY, Url$1);\n  ta(UriPrefix, groups.domain, Url$1);\n  ta(UriPrefix, qsAccepting, Url$1);\n  tt(UriPrefix, SLASH, Url$1);\n  const bracketPairs = [[OPENBRACE, CLOSEBRACE],\n  // {}\n  [OPENBRACKET, CLOSEBRACKET],\n  // []\n  [OPENPAREN, CLOSEPAREN],\n  // ()\n  [OPENANGLEBRACKET, CLOSEANGLEBRACKET],\n  // <>\n  [FULLWIDTHLEFTPAREN, FULLWIDTHRIGHTPAREN],\n  // （）\n  [LEFTCORNERBRACKET, RIGHTCORNERBRACKET],\n  // 「」\n  [LEFTWHITECORNERBRACKET, RIGHTWHITECORNERBRACKET],\n  // 『』\n  [FULLWIDTHLESSTHAN, FULLWIDTHGREATERTHAN] // ＜＞\n  ];\n  for (let i = 0; i < bracketPairs.length; i++) {\n    const [OPEN, CLOSE] = bracketPairs[i];\n    const UrlOpen = tt(Url$1, OPEN); // URL followed by open bracket\n\n    // Continue not accepting for open brackets\n    tt(UrlNonaccept, OPEN, UrlOpen);\n\n    // Closing bracket component. This character WILL be included in the URL\n    tt(UrlOpen, CLOSE, Url$1);\n\n    // URL that beings with an opening bracket, followed by a symbols.\n    // Note that the final state can still be `UrlOpen` (if the URL has a\n    // single opening bracket for some reason).\n    const UrlOpenQ = makeState(Url);\n    ta(UrlOpen, qsAccepting, UrlOpenQ);\n    const UrlOpenSyms = makeState(); // UrlOpen followed by some symbols it cannot end it\n    ta(UrlOpen, qsNonAccepting);\n\n    // URL that begins with an opening bracket, followed by some symbols\n    ta(UrlOpenQ, qsAccepting, UrlOpenQ);\n    ta(UrlOpenQ, qsNonAccepting, UrlOpenSyms);\n    ta(UrlOpenSyms, qsAccepting, UrlOpenQ);\n    ta(UrlOpenSyms, qsNonAccepting, UrlOpenSyms);\n\n    // Close brace/bracket to become regular URL\n    tt(UrlOpenQ, CLOSE, Url$1);\n    tt(UrlOpenSyms, CLOSE, Url$1);\n  }\n  tt(Start, LOCALHOST, DomainDotTld); // localhost is a valid URL state\n  tt(Start, NL, Nl); // single new line\n\n  return {\n    start: Start,\n    tokens: tk\n  };\n}\n\n/**\n * Run the parser state machine on a list of scanned string-based tokens to\n * create a list of multi tokens, each of which represents a URL, email address,\n * plain text, etc.\n *\n * @param {State<MultiToken>} start parser start state\n * @param {string} input the original input used to generate the given tokens\n * @param {Token[]} tokens list of scanned tokens\n * @returns {MultiToken[]}\n */\nfunction run(start, input, tokens) {\n  let len = tokens.length;\n  let cursor = 0;\n  let multis = [];\n  let textTokens = [];\n  while (cursor < len) {\n    let state = start;\n    let secondState = null;\n    let nextState = null;\n    let multiLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {\n      // Starting tokens with nowhere to jump to.\n      // Consider these to be just plain text\n      textTokens.push(tokens[cursor++]);\n    }\n    while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {\n      // Get the next state\n      secondState = null;\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts++;\n      }\n      cursor++;\n      multiLength++;\n    }\n    if (sinceAccepts < 0) {\n      // No accepting state was found, part of a regular text token add\n      // the first text token to the text tokens array and try again from\n      // the next\n      cursor -= multiLength;\n      if (cursor < len) {\n        textTokens.push(tokens[cursor]);\n        cursor++;\n      }\n    } else {\n      // Accepting state!\n      // First close off the textTokens (if available)\n      if (textTokens.length > 0) {\n        multis.push(initMultiToken(Text, input, textTokens));\n        textTokens = [];\n      }\n\n      // Roll back to the latest accepting state\n      cursor -= sinceAccepts;\n      multiLength -= sinceAccepts;\n\n      // Create a new multitoken\n      const Multi = latestAccepting.t;\n      const subtokens = tokens.slice(cursor - multiLength, cursor);\n      multis.push(initMultiToken(Multi, input, subtokens));\n    }\n  }\n\n  // Finally close off the textTokens (if available)\n  if (textTokens.length > 0) {\n    multis.push(initMultiToken(Text, input, textTokens));\n  }\n  return multis;\n}\n\n/**\n * Utility function for instantiating a new multitoken with all the relevant\n * fields during parsing.\n * @param {new (value: string, tokens: Token[]) => MultiToken} Multi class to instantiate\n * @param {string} input original input string\n * @param {Token[]} tokens consecutive tokens scanned from input string\n * @returns {MultiToken}\n */\nfunction initMultiToken(Multi, input, tokens) {\n  const startIdx = tokens[0].s;\n  const endIdx = tokens[tokens.length - 1].e;\n  const value = input.slice(startIdx, endIdx);\n  return new Multi(value, tokens);\n}\n\nconst warn = typeof console !== 'undefined' && console && console.warn || (() => {});\nconst warnAdvice = 'until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.';\n\n// Side-effect initialization state\nconst INIT = {\n  scanner: null,\n  parser: null,\n  tokenQueue: [],\n  pluginQueue: [],\n  customSchemes: [],\n  initialized: false\n};\n\n/**\n * @typedef {{\n * \tstart: State<string>,\n * \ttokens: { groups: Collections<string> } & typeof tk\n * }} ScannerInit\n */\n\n/**\n * @typedef {{\n * \tstart: State<MultiToken>,\n * \ttokens: typeof multi\n * }} ParserInit\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit }) => void} TokenPlugin\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit, parser: ParserInit }) => void} Plugin\n */\n\n/**\n * De-register all plugins and reset the internal state-machine. Used for\n * testing; not required in practice.\n * @private\n */\nfunction reset() {\n  State.groups = {};\n  INIT.scanner = null;\n  INIT.parser = null;\n  INIT.tokenQueue = [];\n  INIT.pluginQueue = [];\n  INIT.customSchemes = [];\n  INIT.initialized = false;\n  return INIT;\n}\n\n/**\n * Register a token plugin to allow the scanner to recognize additional token\n * types before the parser state machine is constructed from the results.\n * @param {string} name of plugin to register\n * @param {TokenPlugin} plugin function that accepts the scanner state machine\n * and available scanner tokens and collections and extends the state machine to\n * recognize additional tokens or groups.\n */\nfunction registerTokenPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(`linkifyjs: Invalid token plugin ${plugin} (expects function)`);\n  }\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    if (name === INIT.tokenQueue[i][0]) {\n      warn(`linkifyjs: token plugin \"${name}\" already registered - will be overwritten`);\n      INIT.tokenQueue[i] = [name, plugin];\n      return;\n    }\n  }\n  INIT.tokenQueue.push([name, plugin]);\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register token plugin \"${name}\" ${warnAdvice}`);\n  }\n}\n\n/**\n * Register a linkify plugin\n * @param {string} name of plugin to register\n * @param {Plugin} plugin function that accepts the parser state machine and\n * extends the parser to recognize additional link types\n */\nfunction registerPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(`linkifyjs: Invalid plugin ${plugin} (expects function)`);\n  }\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    if (name === INIT.pluginQueue[i][0]) {\n      warn(`linkifyjs: plugin \"${name}\" already registered - will be overwritten`);\n      INIT.pluginQueue[i] = [name, plugin];\n      return;\n    }\n  }\n  INIT.pluginQueue.push([name, plugin]);\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register plugin \"${name}\" ${warnAdvice}`);\n  }\n}\n\n/**\n * Detect URLs with the following additional protocol. Anything with format\n * \"protocol://...\" will be considered a link. If `optionalSlashSlash` is set to\n * `true`, anything with format \"protocol:...\" will be considered a link.\n * @param {string} scheme\n * @param {boolean} [optionalSlashSlash]\n */\nfunction registerCustomProtocol(scheme, optionalSlashSlash = false) {\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register custom scheme \"${scheme}\" ${warnAdvice}`);\n  }\n  if (!/^[0-9a-z]+(-[0-9a-z]+)*$/.test(scheme)) {\n    throw new Error(`linkifyjs: incorrect scheme format.\n1. Must only contain digits, lowercase ASCII letters or \"-\"\n2. Cannot start or end with \"-\"\n3. \"-\" cannot repeat`);\n  }\n  INIT.customSchemes.push([scheme, optionalSlashSlash]);\n}\n\n/**\n * Initialize the linkify state machine. Called automatically the first time\n * linkify is called on a string, but may be called manually as well.\n */\nfunction init() {\n  // Initialize scanner state machine and plugins\n  INIT.scanner = init$2(INIT.customSchemes);\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    INIT.tokenQueue[i][1]({\n      scanner: INIT.scanner\n    });\n  }\n\n  // Initialize parser state machine and plugins\n  INIT.parser = init$1(INIT.scanner.tokens);\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    INIT.pluginQueue[i][1]({\n      scanner: INIT.scanner,\n      parser: INIT.parser\n    });\n  }\n  INIT.initialized = true;\n  return INIT;\n}\n\n/**\n * Parse a string into tokens that represent linkable and non-linkable sub-components\n * @param {string} str\n * @return {MultiToken[]} tokens\n */\nfunction tokenize(str) {\n  if (!INIT.initialized) {\n    init();\n  }\n  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));\n}\ntokenize.scan = run$1; // for testing\n\n/**\n * Find a list of linkable items in the given string.\n * @param {string} str string to find links in\n * @param {string | Opts} [type] either formatting options or specific type of\n * links to find, e.g., 'url' or 'email'\n * @param {Opts} [opts] formatting options for final output. Cannot be specified\n * if opts already provided in `type` argument\n */\nfunction find(str, type = null, opts = null) {\n  if (type && typeof type === 'object') {\n    if (opts) {\n      throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);\n    }\n    opts = type;\n    type = null;\n  }\n  const options = new Options(opts);\n  const tokens = tokenize(str);\n  const filtered = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.isLink && (!type || token.t === type) && options.check(token)) {\n      filtered.push(token.toFormattedObject(options));\n    }\n  }\n  return filtered;\n}\n\n/**\n * Is the given string valid linkable text of some sort. Note that this does not\n * trim the text for you.\n *\n * Optionally pass in a second `type` param, which is the type of link to test\n * for.\n *\n * For example,\n *\n *     linkify.test(str, 'email');\n *\n * Returns `true` if str is a valid email.\n * @param {string} str string to test for links\n * @param {string} [type] optional specific link type to look for\n * @returns boolean true/false\n */\nfunction test(str, type = null) {\n  const tokens = tokenize(str);\n  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);\n}\n\nexport { MultiToken, Options, State, createTokenClass, find, init, multi, options, regexp, registerCustomProtocol, registerPlugin, registerTokenPlugin, reset, stringToArray, test, multi as text, tokenize };\n","import * as React from 'react';\nimport { Options, tokenize } from 'linkifyjs';\n\n/**\n * Given a string, converts to an array of valid React components\n * (which may include strings)\n * @param {string} str\n * @param {Options} opts\n * @param {{ [elementId: string]: number }} meta\n * @returns {React.ReactNodeArray}\n */\nfunction stringToElements(str, opts, meta) {\n  const tokens = tokenize(str);\n  const elements = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.t === 'nl' && opts.get('nl2br')) {\n      const key = `__linkify-el-${meta.elementId++}`;\n      elements.push(React.createElement('br', {\n        key\n      }));\n    } else if (!token.isLink || !opts.check(token)) {\n      // Regular text\n      elements.push(token.toString());\n    } else {\n      let rendered = opts.render(token);\n      if (!('key' in rendered.props)) {\n        // Ensure generated element has unique key\n        const key = `__linkify-el-${meta.elementId++}`;\n        const props = Object.assign({\n          key\n        }, rendered.props);\n        rendered = React.cloneElement(rendered, props);\n      }\n      elements.push(rendered);\n    }\n  }\n  return elements;\n}\n\n// Recursively linkify the contents of the given React Element instance\n/**\n * @template P\n * @template {string | React.JSXElementConstructor<P>} T\n * @param {React.ReactElement<P, T>} element\n * @param {Options} opts\n * @param {{ [elementId: string]: number }} meta\n * @returns {React.ReactElement<P, T>}\n */\nfunction linkifyReactElement(element, opts, meta) {\n  if (React.Children.count(element.props.children) === 0) {\n    // No need to clone if the element had no children\n    return element;\n  }\n  const children = [];\n  React.Children.forEach(element.props.children, child => {\n    if (typeof child === 'string') {\n      // ensure that we always generate unique element IDs for keys\n      children.push.apply(children, stringToElements(child, opts, meta));\n    } else if (React.isValidElement(child)) {\n      if (typeof child.type === 'string' && opts.ignoreTags.indexOf(child.type.toUpperCase()) >= 0) {\n        // Don't linkify this element\n        children.push(child);\n      } else {\n        children.push(linkifyReactElement(child, opts, meta));\n      }\n    } else {\n      // Unknown element type, just push\n      children.push(child);\n    }\n  });\n\n  // Set a default unique key, copy over remaining props\n  const key = `__linkify-el-${meta.elementId++}`;\n  const newProps = Object.assign({\n    key\n  }, element.props);\n  return React.cloneElement(element, newProps, children);\n}\n\n/**\n * @template P\n * @template {string | React.JSXElementConstructor<P>} T\n * @param {P & { as?: T, tagName?: T, options?: import('linkifyjs').Opts, children?: React.ReactNode}} props\n * @returns {React.ReactElement<P, T>}\n */\nconst Linkify = props => {\n  // Copy over all non-linkify-specific props\n  let linkId = 0;\n  const defaultLinkRender = ({\n    tagName,\n    attributes,\n    content\n  }) => {\n    attributes.key = `__linkify-lnk-${linkId++}`;\n    if (attributes.class) {\n      attributes.className = attributes.class;\n      delete attributes.class;\n    }\n    return React.createElement(tagName, attributes, content);\n  };\n  const newProps = {\n    key: '__linkify-wrapper'\n  };\n  for (const prop in props) {\n    if (prop !== 'options' && prop !== 'as' && prop !== 'tagName' && prop !== 'children') {\n      newProps[prop] = props[prop];\n    }\n  }\n  const opts = new Options(props.options, defaultLinkRender);\n  const as = props.as || props.tagName || React.Fragment || 'span';\n  const children = props.children;\n  const element = React.createElement(as, newProps, children);\n  return linkifyReactElement(element, opts, {\n    elementId: 0\n  });\n};\n\nexport { Linkify as default };\n","import \"./console-log-card.scss\";\n\nimport Linkify from \"linkify-react\";\nimport {\n  lazy,\n  MouseEvent as ReactMouseEvent,\n  Suspense,\n  useEffect,\n} from \"react\";\n\nimport StatusIcon from \"../../../common/components/status-icon.tsx\";\nimport Tooltip from \"../../../common/components/tooltip.tsx\";\nimport { LocalizedMessageKey, useMessages } from \"../../../common/i18n\";\nimport { classNames } from \"../../../common/utils/classnames.ts\";\nimport { linkifyJsOptions } from \"../../../common/utils/linkify-js.ts\";\nimport LiveTotal from \"../../../common/utils/live-total.tsx\";\nimport {\n  LOG_FETCH_SIZE,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"./PipelineConsoleModel.tsx\";\nimport InputStep from \"./steps/InputStep.tsx\";\n\nconst ConsoleLogStream = lazy(() => import(\"./ConsoleLogStream.tsx\"));\n\nexport default function ConsoleLogCard({\n  step,\n  stepBuffer,\n  isExpanded,\n  onMoreConsoleClick,\n  onStepToggle,\n}: ConsoleLogCardProps) {\n  useEffect(() => {\n    if (isExpanded) {\n      onMoreConsoleClick(step.id, stepBuffer.startByte);\n    }\n  }, [isExpanded, onMoreConsoleClick, step.id, stepBuffer]);\n\n  const handleToggle = (e: ReactMouseEvent<HTMLElement>) => {\n    // Only prevent left clicks\n    if (e.button !== 0 || e.metaKey || e.ctrlKey) {\n      return;\n    }\n\n    e.preventDefault();\n\n    history.replaceState({}, \"\", `?selected-node=` + step.id);\n\n    onStepToggle(step.id);\n  };\n\n  const messages = useMessages();\n\n  const inputStep = step.inputStep;\n  if (inputStep && !inputStep.parameters) {\n    return (\n      <InputStep\n        step={step}\n        stepBuffer={stepBuffer}\n        isExpanded={isExpanded}\n        onStepToggle={onStepToggle}\n        onMoreConsoleClick={onMoreConsoleClick}\n      />\n    );\n  }\n\n  return (\n    <div className={\"pgv-step-detail-group\"} key={`step-card-${step.id}`}>\n      <div\n        className={classNames(\"pgv-step-detail-header\", \"jenkins-button\", {\n          \"jenkins-button--tertiary\": !isExpanded,\n        })}\n      >\n        <a\n          href={`?selected-node=` + step.id}\n          onClick={handleToggle}\n          key={`step-action-area-${step.id}`}\n        >\n          <div className=\"pgv-step-detail-header__content\">\n            <StatusIcon status={step.state} percentage={step.completePercent} />\n\n            {step.title !== \"\" && (\n              <span>\n                <Linkify options={linkifyJsOptions}>{step.title}</Linkify>\n              </span>\n            )}\n\n            {step.name !== \"\" && (\n              <span>\n                <Linkify options={linkifyJsOptions}>{step.name}</Linkify>\n              </span>\n            )}\n\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              viewBox=\"0 0 512 512\"\n              className={\"pgv-step-detail-header__chevron\"}\n              style={{ rotate: isExpanded ? \"90deg\" : \"0deg\" }}\n            >\n              <path\n                fill=\"none\"\n                stroke=\"var(--text-color-secondary)\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"48\"\n                opacity={0.75}\n                d=\"M184 112l144 144-144 144\"\n              />\n            </svg>\n          </div>\n\n          <div className=\"pgv-step-detail-header__actions\">\n            <span\n              style={{\n                color: \"var(--text-color-secondary)\",\n                fontWeight: \"normal\",\n              }}\n            >\n              <LiveTotal\n                total={step.totalDurationMillis}\n                start={step.startTimeMillis}\n              />\n            </span>\n          </div>\n        </a>\n\n        <Tooltip content={messages.format(LocalizedMessageKey.consoleNewTab)}>\n          <a\n            href={`log?nodeId=${step.id}`}\n            className={\"jenkins-button jenkins-button--tertiary\"}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            aria-label={messages.format(LocalizedMessageKey.consoleNewTab)}\n          >\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n              <path\n                d=\"M384 224v184a40 40 0 01-40 40H104a40 40 0 01-40-40V168a40 40 0 0140-40h167.48M336 64h112v112M224 288L440 72\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"32\"\n              />\n            </svg>\n          </a>\n        </Tooltip>\n      </div>\n\n      {isExpanded && (\n        <ConsoleLogBody\n          step={step}\n          stepBuffer={stepBuffer}\n          onMoreConsoleClick={onMoreConsoleClick}\n          isExpanded={false}\n          onStepToggle={onStepToggle}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction ConsoleLogBody({\n  step,\n  stepBuffer,\n  onMoreConsoleClick,\n}: ConsoleLogCardProps) {\n  const prettySizeString = (size: number) => {\n    const kib = 1024;\n    const mib = 1024 * 1024;\n    const gib = 1024 * 1024 * 1024;\n    if (size < kib) return `${size}B`;\n    if (size < mib) return `${(size / kib).toFixed(2)}KiB`;\n    if (size < gib) return `${(size / mib).toFixed(2)}MiB`;\n    return `${(size / gib).toFixed(2)}GiB`;\n  };\n\n  const showMoreLogs = () => {\n    let startByte = stepBuffer.startByte - LOG_FETCH_SIZE;\n    if (startByte < 0) startByte = 0;\n    onMoreConsoleClick(step.id, startByte);\n  };\n\n  const getTruncatedLogWarning = () => {\n    if (stepBuffer.lines && stepBuffer.startByte > 0) {\n      return (\n        <button\n          onClick={showMoreLogs}\n          className={\n            \"pgv-show-more-logs jenkins-button jenkins-!-warning-color\"\n          }\n        >\n          There’s more to see - {prettySizeString(stepBuffer.startByte)} of logs\n          hidden\n        </button>\n      );\n    }\n    return undefined;\n  };\n\n  return (\n    <div style={{ paddingTop: \"0.5rem\" }}>\n      {getTruncatedLogWarning()}\n      <Suspense>\n        <ConsoleLogStream\n          logBuffer={stepBuffer}\n          onMoreConsoleClick={onMoreConsoleClick}\n          step={step}\n          maxHeightScale={0.65}\n        />\n      </Suspense>\n    </div>\n  );\n}\n\nexport type ConsoleLogCardProps = {\n  step: StepInfo;\n  stepBuffer: StepLogBufferInfo;\n  isExpanded: boolean;\n  onStepToggle: (nodeId: string) => void;\n  onMoreConsoleClick: (nodeId: string, startByte: number) => void;\n};\n","import \"./stage-steps.scss\";\n\nimport { StepInfo, StepLogBufferInfo } from \"../../../common/RestClient.tsx\";\nimport ConsoleLogCard from \"./ConsoleLogCard.tsx\";\nimport { LOG_FETCH_SIZE, StageInfo } from \"./PipelineConsoleModel.tsx\";\n\nexport default function StageSteps({\n  stage,\n  stepBuffers,\n  steps,\n  onStepToggle,\n  expandedSteps,\n  onMoreConsoleClick,\n}: StageStepsProps) {\n  if (steps.length === 0) {\n    return null;\n  }\n\n  return (\n    <div\n      className={\"pgv-stage-steps\"}\n      key={`stage-steps-container-${stage ? stage.id : \"unk\"}`}\n    >\n      {steps.map((stepItemData) => {\n        return (\n          <ConsoleLogCard\n            step={stepItemData}\n            stepBuffer={\n              stepBuffers.get(stepItemData.id) ??\n              ({\n                lines: [] as string[],\n                startByte: 0 - LOG_FETCH_SIZE,\n                endByte: -1,\n              } as StepLogBufferInfo)\n            }\n            onStepToggle={onStepToggle}\n            isExpanded={expandedSteps.includes(stepItemData.id)}\n            onMoreConsoleClick={onMoreConsoleClick}\n            key={`step-console-card-${stepItemData.id}`}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\ninterface StageStepsProps {\n  stage: StageInfo | null;\n  steps: Array<StepInfo>;\n  stepBuffers: Map<string, StepLogBufferInfo>;\n  expandedSteps: string[];\n  onStepToggle: (nodeId: string) => void;\n  onMoreConsoleClick: (nodeId: string, startByte: number) => void;\n}\n","import {\n  StageInfo,\n  StepInfo,\n  StepLogBufferInfo,\n} from \"./PipelineConsoleModel.tsx\";\nimport StageDetails from \"./stage-details.tsx\";\nimport StageSteps from \"./stage-steps.tsx\";\n\nexport default function StageView(props: StageViewProps) {\n  return (\n    <>\n      <StageDetails stage={props.stage} />\n      <StageSteps\n        stage={props.stage}\n        steps={props.steps}\n        stepBuffers={props.stepBuffers}\n        expandedSteps={props.expandedSteps}\n        onStepToggle={props.onStepToggle}\n        onMoreConsoleClick={props.onMoreConsoleClick}\n      />\n    </>\n  );\n}\n\nexport interface StageViewProps {\n  stage: StageInfo | null;\n  steps: Array<StepInfo>;\n  stepBuffers: Map<string, StepLogBufferInfo>;\n  expandedSteps: string[];\n  onStepToggle: (nodeId: string) => void;\n  onMoreConsoleClick: (nodeId: string, startByte: number) => void;\n}\n","import \"./pipeline-console.scss\";\nimport \"../../../pipeline-graph-view/app.scss\";\nimport \"../../../pipeline-graph-view/pipeline-graph/styles/main.scss\";\n\nimport Dropdown from \"../../../common/components/dropdown.tsx\";\nimport DropdownPortal from \"../../../common/components/dropdown-portal.tsx\";\nimport {\n  CONSOLE,\n  DOCUMENT,\n  SETTINGS,\n} from \"../../../common/components/symbols.tsx\";\nimport { useUserPermissions } from \"../../../common/user/user-permission-provider.tsx\";\nimport Skeleton from \"./components/skeleton.tsx\";\nimport Stages from \"./components/stages.tsx\";\nimport StagesCustomization from \"./components/stages-customization.tsx\";\nimport DataTreeView from \"./DataTreeView.tsx\";\nimport { useStepsPoller } from \"./hooks/use-steps-poller.ts\";\nimport { NoStageStepsFallback } from \"./NoStageStepsFallback.tsx\";\nimport { useLayoutPreferences } from \"./providers/user-preference-provider.tsx\";\nimport ScrollToTopBottom from \"./scroll-to-top-bottom.tsx\";\nimport SplitView from \"./split-view.tsx\";\nimport StageView from \"./StageView.tsx\";\n\nexport default function PipelineConsole() {\n  const rootElement = document.getElementById(\"console-pipeline-root\");\n  const currentRunPath = rootElement?.dataset.currentRunPath!;\n  const previousRunPath = rootElement?.dataset.previousRunPath;\n\n  const { stageViewPosition, mainViewVisibility } = useLayoutPreferences();\n  const {\n    openStage,\n    openStageSteps,\n    openStageStepBuffers,\n    expandedSteps,\n    stages,\n    handleStageSelect,\n    onStepToggle,\n    onMoreConsoleClick,\n    loading,\n  } = useStepsPoller({ currentRunPath, previousRunPath });\n\n  const showSplitView = loading || (!loading && stages.length > 0);\n\n  const isOnlyPlaceholderNode = stages.length === 1 && stages[0].placeholder;\n\n  const { canConfigure } = useUserPermissions();\n\n  return (\n    <>\n      <DropdownPortal\n        container={document.getElementById(\"console-pipeline-overflow-root\")}\n      >\n        <Dropdown\n          items={[\n            showSplitView ? (\n              <StagesCustomization key=\"visibility-select\" />\n            ) : (\n              <></>\n            ),\n            {\n              text: \"View as plain text\",\n              icon: DOCUMENT,\n              href: `../consoleText`,\n            },\n            {\n              text: \"View classic console\",\n              icon: CONSOLE,\n              href: `../console`,\n            },\n            canConfigure ? (\n              {\n                text: \"Configure\",\n                icon: SETTINGS,\n                href: `../../configure`,\n              }\n            ) : (\n              <></>\n            ),\n          ]}\n        />\n      </DropdownPortal>\n\n      {showSplitView && (\n        <SplitView\n          direction={stageViewPosition === \"top\" ? \"vertical\" : \"horizontal\"}\n          storageKey=\"graph\"\n        >\n          {!isOnlyPlaceholderNode &&\n            (mainViewVisibility === \"both\" ||\n              mainViewVisibility === \"graphOnly\") &&\n            (loading ? (\n              <Skeleton />\n            ) : (\n              <Stages\n                stages={stages}\n                selectedStage={openStage || undefined}\n                stageViewPosition={stageViewPosition}\n                onStageSelect={handleStageSelect}\n              />\n            ))}\n\n          <SplitView storageKey=\"stages\">\n            {(mainViewVisibility === \"both\" ||\n              mainViewVisibility === \"stagesOnly\") &&\n              !isOnlyPlaceholderNode && (\n                <div\n                  key=\"tree-view\"\n                  id=\"tree-view-pane\"\n                  className=\"pgv-sticky-sidebar\"\n                >\n                  {loading ? (\n                    <div className={\"pgv-skeleton-column\"}>\n                      <Skeleton height={2.625} />\n                      <Skeleton height={20} />\n                    </div>\n                  ) : (\n                    <DataTreeView\n                      onNodeSelect={(_, nodeId) => handleStageSelect(nodeId)}\n                      selected={openStage?.id}\n                      stages={stages}\n                    />\n                  )}\n                </div>\n              )}\n\n            <div key=\"stage-view\" id=\"stage-view-pane\">\n              {loading ? (\n                <div className={\"pgv-skeleton-column\"}>\n                  <Skeleton height={2.625} />\n                  <Skeleton height={20} />\n                </div>\n              ) : (\n                <StageView\n                  stage={openStage}\n                  steps={openStageSteps}\n                  stepBuffers={openStageStepBuffers}\n                  expandedSteps={expandedSteps}\n                  onStepToggle={onStepToggle}\n                  onMoreConsoleClick={onMoreConsoleClick}\n                />\n              )}\n            </div>\n          </SplitView>\n        </SplitView>\n      )}\n\n      {!loading && stages.length === 0 && <NoStageStepsFallback />}\n\n      <ScrollToTopBottom />\n    </>\n  );\n}\n"],"file":"assets/PipelineConsole-DYA9HihX.js"}